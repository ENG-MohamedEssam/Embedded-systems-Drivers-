
KPD_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002452  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00002452  000024e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800080  00800080  00002506  2**0
                  ALLOC
  3 .stab         000019c8  00000000  00000000  00002508  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c22  00000000  00000000  00003ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00004af2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00004c52  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00004de1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00006e26  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00007f27  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00008eac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000902c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  000092ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009b7c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e5       	ldi	r30, 0x52	; 82
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 38       	cpi	r26, 0x80	; 128
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e8       	ldi	r26, 0x80	; 128
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 38       	cpi	r26, 0x88	; 136
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c7 11 	call	0x238e	; 0x238e <main>
      8a:	0c 94 27 12 	jmp	0x244e	; 0x244e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e7 11 	jmp	0x23ce	; 0x23ce <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 03 12 	jmp	0x2406	; 0x2406 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f3 11 	jmp	0x23e6	; 0x23e6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 0f 12 	jmp	0x241e	; 0x241e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f3 11 	jmp	0x23e6	; 0x23e6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 0f 12 	jmp	0x241e	; 0x241e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e7 11 	jmp	0x23ce	; 0x23ce <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 03 12 	jmp	0x2406	; 0x2406 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ef 11 	jmp	0x23de	; 0x23de <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 0b 12 	jmp	0x2416	; 0x2416 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 f3 11 	jmp	0x23e6	; 0x23e6 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 0f 12 	jmp	0x241e	; 0x241e <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 f3 11 	jmp	0x23e6	; 0x23e6 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 0f 12 	jmp	0x241e	; 0x241e <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 f3 11 	jmp	0x23e6	; 0x23e6 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 0f 12 	jmp	0x241e	; 0x241e <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 f7 11 	jmp	0x23ee	; 0x23ee <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 13 12 	jmp	0x2426	; 0x2426 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <DIO_u8SetPinDirection>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

u8 DIO_u8SetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId,
		u8 Copy_u8PinDirection) {
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
     ca6:	2e 97       	sbiw	r28, 0x0e	; 14
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	de bf       	out	0x3e, r29	; 62
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	cd bf       	out	0x3d, r28	; 61
     cb2:	8a 83       	std	Y+2, r24	; 0x02
     cb4:	6b 83       	std	Y+3, r22	; 0x03
     cb6:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
     cb8:	81 e0       	ldi	r24, 0x01	; 1
     cba:	89 83       	std	Y+1, r24	; 0x01
	if ((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId <= DIO_u8_PIN7)) {
     cbc:	8a 81       	ldd	r24, Y+2	; 0x02
     cbe:	84 30       	cpi	r24, 0x04	; 4
     cc0:	08 f0       	brcs	.+2      	; 0xcc4 <DIO_u8SetPinDirection+0x26>
     cc2:	6a c1       	rjmp	.+724    	; 0xf98 <DIO_u8SetPinDirection+0x2fa>
     cc4:	8b 81       	ldd	r24, Y+3	; 0x03
     cc6:	88 30       	cpi	r24, 0x08	; 8
     cc8:	08 f0       	brcs	.+2      	; 0xccc <DIO_u8SetPinDirection+0x2e>
     cca:	66 c1       	rjmp	.+716    	; 0xf98 <DIO_u8SetPinDirection+0x2fa>
		switch (Copy_u8PortId) {
     ccc:	8a 81       	ldd	r24, Y+2	; 0x02
     cce:	28 2f       	mov	r18, r24
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	3e 87       	std	Y+14, r19	; 0x0e
     cd4:	2d 87       	std	Y+13, r18	; 0x0d
     cd6:	8d 85       	ldd	r24, Y+13	; 0x0d
     cd8:	9e 85       	ldd	r25, Y+14	; 0x0e
     cda:	81 30       	cpi	r24, 0x01	; 1
     cdc:	91 05       	cpc	r25, r1
     cde:	09 f4       	brne	.+2      	; 0xce2 <DIO_u8SetPinDirection+0x44>
     ce0:	68 c0       	rjmp	.+208    	; 0xdb2 <DIO_u8SetPinDirection+0x114>
     ce2:	2d 85       	ldd	r18, Y+13	; 0x0d
     ce4:	3e 85       	ldd	r19, Y+14	; 0x0e
     ce6:	22 30       	cpi	r18, 0x02	; 2
     ce8:	31 05       	cpc	r19, r1
     cea:	2c f4       	brge	.+10     	; 0xcf6 <DIO_u8SetPinDirection+0x58>
     cec:	8d 85       	ldd	r24, Y+13	; 0x0d
     cee:	9e 85       	ldd	r25, Y+14	; 0x0e
     cf0:	00 97       	sbiw	r24, 0x00	; 0
     cf2:	71 f0       	breq	.+28     	; 0xd10 <DIO_u8SetPinDirection+0x72>
     cf4:	52 c1       	rjmp	.+676    	; 0xf9a <DIO_u8SetPinDirection+0x2fc>
     cf6:	2d 85       	ldd	r18, Y+13	; 0x0d
     cf8:	3e 85       	ldd	r19, Y+14	; 0x0e
     cfa:	22 30       	cpi	r18, 0x02	; 2
     cfc:	31 05       	cpc	r19, r1
     cfe:	09 f4       	brne	.+2      	; 0xd02 <DIO_u8SetPinDirection+0x64>
     d00:	a9 c0       	rjmp	.+338    	; 0xe54 <DIO_u8SetPinDirection+0x1b6>
     d02:	8d 85       	ldd	r24, Y+13	; 0x0d
     d04:	9e 85       	ldd	r25, Y+14	; 0x0e
     d06:	83 30       	cpi	r24, 0x03	; 3
     d08:	91 05       	cpc	r25, r1
     d0a:	09 f4       	brne	.+2      	; 0xd0e <DIO_u8SetPinDirection+0x70>
     d0c:	f4 c0       	rjmp	.+488    	; 0xef6 <DIO_u8SetPinDirection+0x258>
     d0e:	45 c1       	rjmp	.+650    	; 0xf9a <DIO_u8SetPinDirection+0x2fc>
		case DIO_u8_PORTA:
			switch (Copy_u8PinDirection) {
     d10:	8c 81       	ldd	r24, Y+4	; 0x04
     d12:	28 2f       	mov	r18, r24
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	3c 87       	std	Y+12, r19	; 0x0c
     d18:	2b 87       	std	Y+11, r18	; 0x0b
     d1a:	8b 85       	ldd	r24, Y+11	; 0x0b
     d1c:	9c 85       	ldd	r25, Y+12	; 0x0c
     d1e:	81 30       	cpi	r24, 0x01	; 1
     d20:	91 05       	cpc	r25, r1
     d22:	89 f1       	breq	.+98     	; 0xd86 <DIO_u8SetPinDirection+0xe8>
     d24:	2b 85       	ldd	r18, Y+11	; 0x0b
     d26:	3c 85       	ldd	r19, Y+12	; 0x0c
     d28:	22 30       	cpi	r18, 0x02	; 2
     d2a:	31 05       	cpc	r19, r1
     d2c:	29 f0       	breq	.+10     	; 0xd38 <DIO_u8SetPinDirection+0x9a>
     d2e:	8b 85       	ldd	r24, Y+11	; 0x0b
     d30:	9c 85       	ldd	r25, Y+12	; 0x0c
     d32:	00 97       	sbiw	r24, 0x00	; 0
     d34:	99 f0       	breq	.+38     	; 0xd5c <DIO_u8SetPinDirection+0xbe>
     d36:	3b c0       	rjmp	.+118    	; 0xdae <DIO_u8SetPinDirection+0x110>
			case DIO_u8_INPUT_PULLED_UP:
				SET_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
     d38:	ab e3       	ldi	r26, 0x3B	; 59
     d3a:	b0 e0       	ldi	r27, 0x00	; 0
     d3c:	eb e3       	ldi	r30, 0x3B	; 59
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	80 81       	ld	r24, Z
     d42:	48 2f       	mov	r20, r24
     d44:	8b 81       	ldd	r24, Y+3	; 0x03
     d46:	28 2f       	mov	r18, r24
     d48:	30 e0       	ldi	r19, 0x00	; 0
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	02 c0       	rjmp	.+4      	; 0xd54 <DIO_u8SetPinDirection+0xb6>
     d50:	88 0f       	add	r24, r24
     d52:	99 1f       	adc	r25, r25
     d54:	2a 95       	dec	r18
     d56:	e2 f7       	brpl	.-8      	; 0xd50 <DIO_u8SetPinDirection+0xb2>
     d58:	84 2b       	or	r24, r20
     d5a:	8c 93       	st	X, r24
			case DIO_u8_INPUT_FLOATING:
				CLR_BIT(DIO_u8_DDRA_REG, Copy_u8PinId);
     d5c:	aa e3       	ldi	r26, 0x3A	; 58
     d5e:	b0 e0       	ldi	r27, 0x00	; 0
     d60:	ea e3       	ldi	r30, 0x3A	; 58
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	48 2f       	mov	r20, r24
     d68:	8b 81       	ldd	r24, Y+3	; 0x03
     d6a:	28 2f       	mov	r18, r24
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	02 2e       	mov	r0, r18
     d74:	02 c0       	rjmp	.+4      	; 0xd7a <DIO_u8SetPinDirection+0xdc>
     d76:	88 0f       	add	r24, r24
     d78:	99 1f       	adc	r25, r25
     d7a:	0a 94       	dec	r0
     d7c:	e2 f7       	brpl	.-8      	; 0xd76 <DIO_u8SetPinDirection+0xd8>
     d7e:	80 95       	com	r24
     d80:	84 23       	and	r24, r20
     d82:	8c 93       	st	X, r24
     d84:	0a c1       	rjmp	.+532    	; 0xf9a <DIO_u8SetPinDirection+0x2fc>
				break;
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRA_REG, Copy_u8PinId);
     d86:	aa e3       	ldi	r26, 0x3A	; 58
     d88:	b0 e0       	ldi	r27, 0x00	; 0
     d8a:	ea e3       	ldi	r30, 0x3A	; 58
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	48 2f       	mov	r20, r24
     d92:	8b 81       	ldd	r24, Y+3	; 0x03
     d94:	28 2f       	mov	r18, r24
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	02 2e       	mov	r0, r18
     d9e:	02 c0       	rjmp	.+4      	; 0xda4 <DIO_u8SetPinDirection+0x106>
     da0:	88 0f       	add	r24, r24
     da2:	99 1f       	adc	r25, r25
     da4:	0a 94       	dec	r0
     da6:	e2 f7       	brpl	.-8      	; 0xda0 <DIO_u8SetPinDirection+0x102>
     da8:	84 2b       	or	r24, r20
     daa:	8c 93       	st	X, r24
     dac:	f6 c0       	rjmp	.+492    	; 0xf9a <DIO_u8SetPinDirection+0x2fc>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
     dae:	19 82       	std	Y+1, r1	; 0x01
     db0:	f4 c0       	rjmp	.+488    	; 0xf9a <DIO_u8SetPinDirection+0x2fc>
			}
			break;
		case DIO_u8_PORTB:
			switch (Copy_u8PinDirection) {
     db2:	8c 81       	ldd	r24, Y+4	; 0x04
     db4:	28 2f       	mov	r18, r24
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	3a 87       	std	Y+10, r19	; 0x0a
     dba:	29 87       	std	Y+9, r18	; 0x09
     dbc:	89 85       	ldd	r24, Y+9	; 0x09
     dbe:	9a 85       	ldd	r25, Y+10	; 0x0a
     dc0:	81 30       	cpi	r24, 0x01	; 1
     dc2:	91 05       	cpc	r25, r1
     dc4:	89 f1       	breq	.+98     	; 0xe28 <DIO_u8SetPinDirection+0x18a>
     dc6:	29 85       	ldd	r18, Y+9	; 0x09
     dc8:	3a 85       	ldd	r19, Y+10	; 0x0a
     dca:	22 30       	cpi	r18, 0x02	; 2
     dcc:	31 05       	cpc	r19, r1
     dce:	29 f0       	breq	.+10     	; 0xdda <DIO_u8SetPinDirection+0x13c>
     dd0:	89 85       	ldd	r24, Y+9	; 0x09
     dd2:	9a 85       	ldd	r25, Y+10	; 0x0a
     dd4:	00 97       	sbiw	r24, 0x00	; 0
     dd6:	99 f0       	breq	.+38     	; 0xdfe <DIO_u8SetPinDirection+0x160>
     dd8:	3b c0       	rjmp	.+118    	; 0xe50 <DIO_u8SetPinDirection+0x1b2>
			case DIO_u8_INPUT_PULLED_UP:
				SET_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
     dda:	a8 e3       	ldi	r26, 0x38	; 56
     ddc:	b0 e0       	ldi	r27, 0x00	; 0
     dde:	e8 e3       	ldi	r30, 0x38	; 56
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	80 81       	ld	r24, Z
     de4:	48 2f       	mov	r20, r24
     de6:	8b 81       	ldd	r24, Y+3	; 0x03
     de8:	28 2f       	mov	r18, r24
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	81 e0       	ldi	r24, 0x01	; 1
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	02 c0       	rjmp	.+4      	; 0xdf6 <DIO_u8SetPinDirection+0x158>
     df2:	88 0f       	add	r24, r24
     df4:	99 1f       	adc	r25, r25
     df6:	2a 95       	dec	r18
     df8:	e2 f7       	brpl	.-8      	; 0xdf2 <DIO_u8SetPinDirection+0x154>
     dfa:	84 2b       	or	r24, r20
     dfc:	8c 93       	st	X, r24
			case DIO_u8_INPUT_FLOATING:
				CLR_BIT(DIO_u8_DDRB_REG, Copy_u8PinId);
     dfe:	a7 e3       	ldi	r26, 0x37	; 55
     e00:	b0 e0       	ldi	r27, 0x00	; 0
     e02:	e7 e3       	ldi	r30, 0x37	; 55
     e04:	f0 e0       	ldi	r31, 0x00	; 0
     e06:	80 81       	ld	r24, Z
     e08:	48 2f       	mov	r20, r24
     e0a:	8b 81       	ldd	r24, Y+3	; 0x03
     e0c:	28 2f       	mov	r18, r24
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	02 2e       	mov	r0, r18
     e16:	02 c0       	rjmp	.+4      	; 0xe1c <DIO_u8SetPinDirection+0x17e>
     e18:	88 0f       	add	r24, r24
     e1a:	99 1f       	adc	r25, r25
     e1c:	0a 94       	dec	r0
     e1e:	e2 f7       	brpl	.-8      	; 0xe18 <DIO_u8SetPinDirection+0x17a>
     e20:	80 95       	com	r24
     e22:	84 23       	and	r24, r20
     e24:	8c 93       	st	X, r24
     e26:	b9 c0       	rjmp	.+370    	; 0xf9a <DIO_u8SetPinDirection+0x2fc>
				break;
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRB_REG, Copy_u8PinId);
     e28:	a7 e3       	ldi	r26, 0x37	; 55
     e2a:	b0 e0       	ldi	r27, 0x00	; 0
     e2c:	e7 e3       	ldi	r30, 0x37	; 55
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	48 2f       	mov	r20, r24
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	28 2f       	mov	r18, r24
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	02 2e       	mov	r0, r18
     e40:	02 c0       	rjmp	.+4      	; 0xe46 <DIO_u8SetPinDirection+0x1a8>
     e42:	88 0f       	add	r24, r24
     e44:	99 1f       	adc	r25, r25
     e46:	0a 94       	dec	r0
     e48:	e2 f7       	brpl	.-8      	; 0xe42 <DIO_u8SetPinDirection+0x1a4>
     e4a:	84 2b       	or	r24, r20
     e4c:	8c 93       	st	X, r24
     e4e:	a5 c0       	rjmp	.+330    	; 0xf9a <DIO_u8SetPinDirection+0x2fc>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
     e50:	19 82       	std	Y+1, r1	; 0x01
     e52:	a3 c0       	rjmp	.+326    	; 0xf9a <DIO_u8SetPinDirection+0x2fc>
			}
			break;
		case DIO_u8_PORTC:
			switch (Copy_u8PinDirection) {
     e54:	8c 81       	ldd	r24, Y+4	; 0x04
     e56:	28 2f       	mov	r18, r24
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	38 87       	std	Y+8, r19	; 0x08
     e5c:	2f 83       	std	Y+7, r18	; 0x07
     e5e:	8f 81       	ldd	r24, Y+7	; 0x07
     e60:	98 85       	ldd	r25, Y+8	; 0x08
     e62:	81 30       	cpi	r24, 0x01	; 1
     e64:	91 05       	cpc	r25, r1
     e66:	89 f1       	breq	.+98     	; 0xeca <DIO_u8SetPinDirection+0x22c>
     e68:	2f 81       	ldd	r18, Y+7	; 0x07
     e6a:	38 85       	ldd	r19, Y+8	; 0x08
     e6c:	22 30       	cpi	r18, 0x02	; 2
     e6e:	31 05       	cpc	r19, r1
     e70:	29 f0       	breq	.+10     	; 0xe7c <DIO_u8SetPinDirection+0x1de>
     e72:	8f 81       	ldd	r24, Y+7	; 0x07
     e74:	98 85       	ldd	r25, Y+8	; 0x08
     e76:	00 97       	sbiw	r24, 0x00	; 0
     e78:	99 f0       	breq	.+38     	; 0xea0 <DIO_u8SetPinDirection+0x202>
     e7a:	3b c0       	rjmp	.+118    	; 0xef2 <DIO_u8SetPinDirection+0x254>
			case DIO_u8_INPUT_PULLED_UP:
				SET_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
     e7c:	a5 e3       	ldi	r26, 0x35	; 53
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e5 e3       	ldi	r30, 0x35	; 53
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	48 2f       	mov	r20, r24
     e88:	8b 81       	ldd	r24, Y+3	; 0x03
     e8a:	28 2f       	mov	r18, r24
     e8c:	30 e0       	ldi	r19, 0x00	; 0
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	02 c0       	rjmp	.+4      	; 0xe98 <DIO_u8SetPinDirection+0x1fa>
     e94:	88 0f       	add	r24, r24
     e96:	99 1f       	adc	r25, r25
     e98:	2a 95       	dec	r18
     e9a:	e2 f7       	brpl	.-8      	; 0xe94 <DIO_u8SetPinDirection+0x1f6>
     e9c:	84 2b       	or	r24, r20
     e9e:	8c 93       	st	X, r24
			case DIO_u8_INPUT_FLOATING:
				CLR_BIT(DIO_u8_DDRC_REG, Copy_u8PinId);
     ea0:	a4 e3       	ldi	r26, 0x34	; 52
     ea2:	b0 e0       	ldi	r27, 0x00	; 0
     ea4:	e4 e3       	ldi	r30, 0x34	; 52
     ea6:	f0 e0       	ldi	r31, 0x00	; 0
     ea8:	80 81       	ld	r24, Z
     eaa:	48 2f       	mov	r20, r24
     eac:	8b 81       	ldd	r24, Y+3	; 0x03
     eae:	28 2f       	mov	r18, r24
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	81 e0       	ldi	r24, 0x01	; 1
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	02 2e       	mov	r0, r18
     eb8:	02 c0       	rjmp	.+4      	; 0xebe <DIO_u8SetPinDirection+0x220>
     eba:	88 0f       	add	r24, r24
     ebc:	99 1f       	adc	r25, r25
     ebe:	0a 94       	dec	r0
     ec0:	e2 f7       	brpl	.-8      	; 0xeba <DIO_u8SetPinDirection+0x21c>
     ec2:	80 95       	com	r24
     ec4:	84 23       	and	r24, r20
     ec6:	8c 93       	st	X, r24
     ec8:	68 c0       	rjmp	.+208    	; 0xf9a <DIO_u8SetPinDirection+0x2fc>
				break;
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRC_REG, Copy_u8PinId);
     eca:	a4 e3       	ldi	r26, 0x34	; 52
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	e4 e3       	ldi	r30, 0x34	; 52
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	48 2f       	mov	r20, r24
     ed6:	8b 81       	ldd	r24, Y+3	; 0x03
     ed8:	28 2f       	mov	r18, r24
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	02 2e       	mov	r0, r18
     ee2:	02 c0       	rjmp	.+4      	; 0xee8 <DIO_u8SetPinDirection+0x24a>
     ee4:	88 0f       	add	r24, r24
     ee6:	99 1f       	adc	r25, r25
     ee8:	0a 94       	dec	r0
     eea:	e2 f7       	brpl	.-8      	; 0xee4 <DIO_u8SetPinDirection+0x246>
     eec:	84 2b       	or	r24, r20
     eee:	8c 93       	st	X, r24
     ef0:	54 c0       	rjmp	.+168    	; 0xf9a <DIO_u8SetPinDirection+0x2fc>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
     ef2:	19 82       	std	Y+1, r1	; 0x01
     ef4:	52 c0       	rjmp	.+164    	; 0xf9a <DIO_u8SetPinDirection+0x2fc>
			}
			break;
		case DIO_u8_PORTD:
			switch (Copy_u8PinDirection) {
     ef6:	8c 81       	ldd	r24, Y+4	; 0x04
     ef8:	28 2f       	mov	r18, r24
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	3e 83       	std	Y+6, r19	; 0x06
     efe:	2d 83       	std	Y+5, r18	; 0x05
     f00:	8d 81       	ldd	r24, Y+5	; 0x05
     f02:	9e 81       	ldd	r25, Y+6	; 0x06
     f04:	81 30       	cpi	r24, 0x01	; 1
     f06:	91 05       	cpc	r25, r1
     f08:	89 f1       	breq	.+98     	; 0xf6c <DIO_u8SetPinDirection+0x2ce>
     f0a:	2d 81       	ldd	r18, Y+5	; 0x05
     f0c:	3e 81       	ldd	r19, Y+6	; 0x06
     f0e:	22 30       	cpi	r18, 0x02	; 2
     f10:	31 05       	cpc	r19, r1
     f12:	29 f0       	breq	.+10     	; 0xf1e <DIO_u8SetPinDirection+0x280>
     f14:	8d 81       	ldd	r24, Y+5	; 0x05
     f16:	9e 81       	ldd	r25, Y+6	; 0x06
     f18:	00 97       	sbiw	r24, 0x00	; 0
     f1a:	99 f0       	breq	.+38     	; 0xf42 <DIO_u8SetPinDirection+0x2a4>
     f1c:	3b c0       	rjmp	.+118    	; 0xf94 <DIO_u8SetPinDirection+0x2f6>
			case DIO_u8_INPUT_PULLED_UP:
				SET_BIT(DIO_u8_PORTD_REG, Copy_u8PinId);
     f1e:	a2 e3       	ldi	r26, 0x32	; 50
     f20:	b0 e0       	ldi	r27, 0x00	; 0
     f22:	e2 e3       	ldi	r30, 0x32	; 50
     f24:	f0 e0       	ldi	r31, 0x00	; 0
     f26:	80 81       	ld	r24, Z
     f28:	48 2f       	mov	r20, r24
     f2a:	8b 81       	ldd	r24, Y+3	; 0x03
     f2c:	28 2f       	mov	r18, r24
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	02 c0       	rjmp	.+4      	; 0xf3a <DIO_u8SetPinDirection+0x29c>
     f36:	88 0f       	add	r24, r24
     f38:	99 1f       	adc	r25, r25
     f3a:	2a 95       	dec	r18
     f3c:	e2 f7       	brpl	.-8      	; 0xf36 <DIO_u8SetPinDirection+0x298>
     f3e:	84 2b       	or	r24, r20
     f40:	8c 93       	st	X, r24
			case DIO_u8_INPUT_FLOATING:
				CLR_BIT(DIO_u8_DDRD_REG, Copy_u8PinId);
     f42:	a1 e3       	ldi	r26, 0x31	; 49
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	e1 e3       	ldi	r30, 0x31	; 49
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	48 2f       	mov	r20, r24
     f4e:	8b 81       	ldd	r24, Y+3	; 0x03
     f50:	28 2f       	mov	r18, r24
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	02 2e       	mov	r0, r18
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <DIO_u8SetPinDirection+0x2c2>
     f5c:	88 0f       	add	r24, r24
     f5e:	99 1f       	adc	r25, r25
     f60:	0a 94       	dec	r0
     f62:	e2 f7       	brpl	.-8      	; 0xf5c <DIO_u8SetPinDirection+0x2be>
     f64:	80 95       	com	r24
     f66:	84 23       	and	r24, r20
     f68:	8c 93       	st	X, r24
     f6a:	17 c0       	rjmp	.+46     	; 0xf9a <DIO_u8SetPinDirection+0x2fc>
				break;
			case DIO_u8_OUTPUT:
				SET_BIT(DIO_u8_DDRD_REG, Copy_u8PinId);
     f6c:	a1 e3       	ldi	r26, 0x31	; 49
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
     f70:	e1 e3       	ldi	r30, 0x31	; 49
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	48 2f       	mov	r20, r24
     f78:	8b 81       	ldd	r24, Y+3	; 0x03
     f7a:	28 2f       	mov	r18, r24
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	02 2e       	mov	r0, r18
     f84:	02 c0       	rjmp	.+4      	; 0xf8a <DIO_u8SetPinDirection+0x2ec>
     f86:	88 0f       	add	r24, r24
     f88:	99 1f       	adc	r25, r25
     f8a:	0a 94       	dec	r0
     f8c:	e2 f7       	brpl	.-8      	; 0xf86 <DIO_u8SetPinDirection+0x2e8>
     f8e:	84 2b       	or	r24, r20
     f90:	8c 93       	st	X, r24
     f92:	03 c0       	rjmp	.+6      	; 0xf9a <DIO_u8SetPinDirection+0x2fc>
				break;
			default:
				Local_u8ErrorState = STD_TYPES_NOK;
     f94:	19 82       	std	Y+1, r1	; 0x01
     f96:	01 c0       	rjmp	.+2      	; 0xf9a <DIO_u8SetPinDirection+0x2fc>
			}
			break;
		}
	} else {
		Local_u8ErrorState = STD_TYPES_NOK;
     f98:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     f9a:	89 81       	ldd	r24, Y+1	; 0x01
}
     f9c:	2e 96       	adiw	r28, 0x0e	; 14
     f9e:	0f b6       	in	r0, 0x3f	; 63
     fa0:	f8 94       	cli
     fa2:	de bf       	out	0x3e, r29	; 62
     fa4:	0f be       	out	0x3f, r0	; 63
     fa6:	cd bf       	out	0x3d, r28	; 61
     fa8:	cf 91       	pop	r28
     faa:	df 91       	pop	r29
     fac:	08 95       	ret

00000fae <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8PinValue) {
     fae:	df 93       	push	r29
     fb0:	cf 93       	push	r28
     fb2:	cd b7       	in	r28, 0x3d	; 61
     fb4:	de b7       	in	r29, 0x3e	; 62
     fb6:	2e 97       	sbiw	r28, 0x0e	; 14
     fb8:	0f b6       	in	r0, 0x3f	; 63
     fba:	f8 94       	cli
     fbc:	de bf       	out	0x3e, r29	; 62
     fbe:	0f be       	out	0x3f, r0	; 63
     fc0:	cd bf       	out	0x3d, r28	; 61
     fc2:	8a 83       	std	Y+2, r24	; 0x02
     fc4:	6b 83       	std	Y+3, r22	; 0x03
     fc6:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_OK;
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	89 83       	std	Y+1, r24	; 0x01
	if ((Copy_u8PinId <= DIO_u8_PIN7)
     fcc:	8b 81       	ldd	r24, Y+3	; 0x03
     fce:	88 30       	cpi	r24, 0x08	; 8
     fd0:	08 f0       	brcs	.+2      	; 0xfd4 <DIO_u8SetPinValue+0x26>
     fd2:	0a c1       	rjmp	.+532    	; 0x11e8 <DIO_u8SetPinValue+0x23a>
     fd4:	8c 81       	ldd	r24, Y+4	; 0x04
     fd6:	81 30       	cpi	r24, 0x01	; 1
     fd8:	21 f0       	breq	.+8      	; 0xfe2 <DIO_u8SetPinValue+0x34>
     fda:	8c 81       	ldd	r24, Y+4	; 0x04
     fdc:	88 23       	and	r24, r24
     fde:	09 f0       	breq	.+2      	; 0xfe2 <DIO_u8SetPinValue+0x34>
     fe0:	03 c1       	rjmp	.+518    	; 0x11e8 <DIO_u8SetPinValue+0x23a>
			&& ((Copy_u8PinValue == DIO_u8_HIGH)
					|| (Copy_u8PinValue == DIO_u8_LOW))) {
		switch (Copy_u8PortId) {
     fe2:	8a 81       	ldd	r24, Y+2	; 0x02
     fe4:	28 2f       	mov	r18, r24
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	3e 87       	std	Y+14, r19	; 0x0e
     fea:	2d 87       	std	Y+13, r18	; 0x0d
     fec:	8d 85       	ldd	r24, Y+13	; 0x0d
     fee:	9e 85       	ldd	r25, Y+14	; 0x0e
     ff0:	81 30       	cpi	r24, 0x01	; 1
     ff2:	91 05       	cpc	r25, r1
     ff4:	09 f4       	brne	.+2      	; 0xff8 <DIO_u8SetPinValue+0x4a>
     ff6:	4f c0       	rjmp	.+158    	; 0x1096 <DIO_u8SetPinValue+0xe8>
     ff8:	2d 85       	ldd	r18, Y+13	; 0x0d
     ffa:	3e 85       	ldd	r19, Y+14	; 0x0e
     ffc:	22 30       	cpi	r18, 0x02	; 2
     ffe:	31 05       	cpc	r19, r1
    1000:	2c f4       	brge	.+10     	; 0x100c <DIO_u8SetPinValue+0x5e>
    1002:	8d 85       	ldd	r24, Y+13	; 0x0d
    1004:	9e 85       	ldd	r25, Y+14	; 0x0e
    1006:	00 97       	sbiw	r24, 0x00	; 0
    1008:	71 f0       	breq	.+28     	; 0x1026 <DIO_u8SetPinValue+0x78>
    100a:	ec c0       	rjmp	.+472    	; 0x11e4 <DIO_u8SetPinValue+0x236>
    100c:	2d 85       	ldd	r18, Y+13	; 0x0d
    100e:	3e 85       	ldd	r19, Y+14	; 0x0e
    1010:	22 30       	cpi	r18, 0x02	; 2
    1012:	31 05       	cpc	r19, r1
    1014:	09 f4       	brne	.+2      	; 0x1018 <DIO_u8SetPinValue+0x6a>
    1016:	77 c0       	rjmp	.+238    	; 0x1106 <DIO_u8SetPinValue+0x158>
    1018:	8d 85       	ldd	r24, Y+13	; 0x0d
    101a:	9e 85       	ldd	r25, Y+14	; 0x0e
    101c:	83 30       	cpi	r24, 0x03	; 3
    101e:	91 05       	cpc	r25, r1
    1020:	09 f4       	brne	.+2      	; 0x1024 <DIO_u8SetPinValue+0x76>
    1022:	a9 c0       	rjmp	.+338    	; 0x1176 <DIO_u8SetPinValue+0x1c8>
    1024:	df c0       	rjmp	.+446    	; 0x11e4 <DIO_u8SetPinValue+0x236>
		case DIO_u8_PORTA:
			switch (Copy_u8PinValue) {
    1026:	8c 81       	ldd	r24, Y+4	; 0x04
    1028:	28 2f       	mov	r18, r24
    102a:	30 e0       	ldi	r19, 0x00	; 0
    102c:	3c 87       	std	Y+12, r19	; 0x0c
    102e:	2b 87       	std	Y+11, r18	; 0x0b
    1030:	8b 85       	ldd	r24, Y+11	; 0x0b
    1032:	9c 85       	ldd	r25, Y+12	; 0x0c
    1034:	00 97       	sbiw	r24, 0x00	; 0
    1036:	d1 f0       	breq	.+52     	; 0x106c <DIO_u8SetPinValue+0xbe>
    1038:	2b 85       	ldd	r18, Y+11	; 0x0b
    103a:	3c 85       	ldd	r19, Y+12	; 0x0c
    103c:	21 30       	cpi	r18, 0x01	; 1
    103e:	31 05       	cpc	r19, r1
    1040:	09 f0       	breq	.+2      	; 0x1044 <DIO_u8SetPinValue+0x96>
    1042:	d3 c0       	rjmp	.+422    	; 0x11ea <DIO_u8SetPinValue+0x23c>
			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
    1044:	ab e3       	ldi	r26, 0x3B	; 59
    1046:	b0 e0       	ldi	r27, 0x00	; 0
    1048:	eb e3       	ldi	r30, 0x3B	; 59
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	48 2f       	mov	r20, r24
    1050:	8b 81       	ldd	r24, Y+3	; 0x03
    1052:	28 2f       	mov	r18, r24
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	02 2e       	mov	r0, r18
    105c:	02 c0       	rjmp	.+4      	; 0x1062 <DIO_u8SetPinValue+0xb4>
    105e:	88 0f       	add	r24, r24
    1060:	99 1f       	adc	r25, r25
    1062:	0a 94       	dec	r0
    1064:	e2 f7       	brpl	.-8      	; 0x105e <DIO_u8SetPinValue+0xb0>
    1066:	84 2b       	or	r24, r20
    1068:	8c 93       	st	X, r24
    106a:	bf c0       	rjmp	.+382    	; 0x11ea <DIO_u8SetPinValue+0x23c>
				break;
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTA_REG, Copy_u8PinId);
    106c:	ab e3       	ldi	r26, 0x3B	; 59
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	eb e3       	ldi	r30, 0x3B	; 59
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	48 2f       	mov	r20, r24
    1078:	8b 81       	ldd	r24, Y+3	; 0x03
    107a:	28 2f       	mov	r18, r24
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	02 2e       	mov	r0, r18
    1084:	02 c0       	rjmp	.+4      	; 0x108a <DIO_u8SetPinValue+0xdc>
    1086:	88 0f       	add	r24, r24
    1088:	99 1f       	adc	r25, r25
    108a:	0a 94       	dec	r0
    108c:	e2 f7       	brpl	.-8      	; 0x1086 <DIO_u8SetPinValue+0xd8>
    108e:	80 95       	com	r24
    1090:	84 23       	and	r24, r20
    1092:	8c 93       	st	X, r24
    1094:	aa c0       	rjmp	.+340    	; 0x11ea <DIO_u8SetPinValue+0x23c>
				break;
			}
			break;
		case DIO_u8_PORTB:
			switch (Copy_u8PinValue) {
    1096:	8c 81       	ldd	r24, Y+4	; 0x04
    1098:	28 2f       	mov	r18, r24
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	3a 87       	std	Y+10, r19	; 0x0a
    109e:	29 87       	std	Y+9, r18	; 0x09
    10a0:	89 85       	ldd	r24, Y+9	; 0x09
    10a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    10a4:	00 97       	sbiw	r24, 0x00	; 0
    10a6:	d1 f0       	breq	.+52     	; 0x10dc <DIO_u8SetPinValue+0x12e>
    10a8:	29 85       	ldd	r18, Y+9	; 0x09
    10aa:	3a 85       	ldd	r19, Y+10	; 0x0a
    10ac:	21 30       	cpi	r18, 0x01	; 1
    10ae:	31 05       	cpc	r19, r1
    10b0:	09 f0       	breq	.+2      	; 0x10b4 <DIO_u8SetPinValue+0x106>
    10b2:	9b c0       	rjmp	.+310    	; 0x11ea <DIO_u8SetPinValue+0x23c>
			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
    10b4:	a8 e3       	ldi	r26, 0x38	; 56
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	e8 e3       	ldi	r30, 0x38	; 56
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	48 2f       	mov	r20, r24
    10c0:	8b 81       	ldd	r24, Y+3	; 0x03
    10c2:	28 2f       	mov	r18, r24
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	81 e0       	ldi	r24, 0x01	; 1
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	02 2e       	mov	r0, r18
    10cc:	02 c0       	rjmp	.+4      	; 0x10d2 <DIO_u8SetPinValue+0x124>
    10ce:	88 0f       	add	r24, r24
    10d0:	99 1f       	adc	r25, r25
    10d2:	0a 94       	dec	r0
    10d4:	e2 f7       	brpl	.-8      	; 0x10ce <DIO_u8SetPinValue+0x120>
    10d6:	84 2b       	or	r24, r20
    10d8:	8c 93       	st	X, r24
    10da:	87 c0       	rjmp	.+270    	; 0x11ea <DIO_u8SetPinValue+0x23c>
				break;
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTB_REG, Copy_u8PinId);
    10dc:	a8 e3       	ldi	r26, 0x38	; 56
    10de:	b0 e0       	ldi	r27, 0x00	; 0
    10e0:	e8 e3       	ldi	r30, 0x38	; 56
    10e2:	f0 e0       	ldi	r31, 0x00	; 0
    10e4:	80 81       	ld	r24, Z
    10e6:	48 2f       	mov	r20, r24
    10e8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ea:	28 2f       	mov	r18, r24
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	81 e0       	ldi	r24, 0x01	; 1
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	02 2e       	mov	r0, r18
    10f4:	02 c0       	rjmp	.+4      	; 0x10fa <DIO_u8SetPinValue+0x14c>
    10f6:	88 0f       	add	r24, r24
    10f8:	99 1f       	adc	r25, r25
    10fa:	0a 94       	dec	r0
    10fc:	e2 f7       	brpl	.-8      	; 0x10f6 <DIO_u8SetPinValue+0x148>
    10fe:	80 95       	com	r24
    1100:	84 23       	and	r24, r20
    1102:	8c 93       	st	X, r24
    1104:	72 c0       	rjmp	.+228    	; 0x11ea <DIO_u8SetPinValue+0x23c>
				break;
			}
			break;
		case DIO_u8_PORTC:
			switch (Copy_u8PinValue) {
    1106:	8c 81       	ldd	r24, Y+4	; 0x04
    1108:	28 2f       	mov	r18, r24
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	38 87       	std	Y+8, r19	; 0x08
    110e:	2f 83       	std	Y+7, r18	; 0x07
    1110:	8f 81       	ldd	r24, Y+7	; 0x07
    1112:	98 85       	ldd	r25, Y+8	; 0x08
    1114:	00 97       	sbiw	r24, 0x00	; 0
    1116:	d1 f0       	breq	.+52     	; 0x114c <DIO_u8SetPinValue+0x19e>
    1118:	2f 81       	ldd	r18, Y+7	; 0x07
    111a:	38 85       	ldd	r19, Y+8	; 0x08
    111c:	21 30       	cpi	r18, 0x01	; 1
    111e:	31 05       	cpc	r19, r1
    1120:	09 f0       	breq	.+2      	; 0x1124 <DIO_u8SetPinValue+0x176>
    1122:	63 c0       	rjmp	.+198    	; 0x11ea <DIO_u8SetPinValue+0x23c>
			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    1124:	a5 e3       	ldi	r26, 0x35	; 53
    1126:	b0 e0       	ldi	r27, 0x00	; 0
    1128:	e5 e3       	ldi	r30, 0x35	; 53
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	48 2f       	mov	r20, r24
    1130:	8b 81       	ldd	r24, Y+3	; 0x03
    1132:	28 2f       	mov	r18, r24
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	02 2e       	mov	r0, r18
    113c:	02 c0       	rjmp	.+4      	; 0x1142 <DIO_u8SetPinValue+0x194>
    113e:	88 0f       	add	r24, r24
    1140:	99 1f       	adc	r25, r25
    1142:	0a 94       	dec	r0
    1144:	e2 f7       	brpl	.-8      	; 0x113e <DIO_u8SetPinValue+0x190>
    1146:	84 2b       	or	r24, r20
    1148:	8c 93       	st	X, r24
    114a:	4f c0       	rjmp	.+158    	; 0x11ea <DIO_u8SetPinValue+0x23c>
				break;
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTC_REG, Copy_u8PinId);
    114c:	a5 e3       	ldi	r26, 0x35	; 53
    114e:	b0 e0       	ldi	r27, 0x00	; 0
    1150:	e5 e3       	ldi	r30, 0x35	; 53
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	80 81       	ld	r24, Z
    1156:	48 2f       	mov	r20, r24
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	28 2f       	mov	r18, r24
    115c:	30 e0       	ldi	r19, 0x00	; 0
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	02 2e       	mov	r0, r18
    1164:	02 c0       	rjmp	.+4      	; 0x116a <DIO_u8SetPinValue+0x1bc>
    1166:	88 0f       	add	r24, r24
    1168:	99 1f       	adc	r25, r25
    116a:	0a 94       	dec	r0
    116c:	e2 f7       	brpl	.-8      	; 0x1166 <DIO_u8SetPinValue+0x1b8>
    116e:	80 95       	com	r24
    1170:	84 23       	and	r24, r20
    1172:	8c 93       	st	X, r24
    1174:	3a c0       	rjmp	.+116    	; 0x11ea <DIO_u8SetPinValue+0x23c>
				break;
			}
			break;
		case DIO_u8_PORTD:
			switch (Copy_u8PinValue) {
    1176:	8c 81       	ldd	r24, Y+4	; 0x04
    1178:	28 2f       	mov	r18, r24
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	3e 83       	std	Y+6, r19	; 0x06
    117e:	2d 83       	std	Y+5, r18	; 0x05
    1180:	8d 81       	ldd	r24, Y+5	; 0x05
    1182:	9e 81       	ldd	r25, Y+6	; 0x06
    1184:	00 97       	sbiw	r24, 0x00	; 0
    1186:	c9 f0       	breq	.+50     	; 0x11ba <DIO_u8SetPinValue+0x20c>
    1188:	2d 81       	ldd	r18, Y+5	; 0x05
    118a:	3e 81       	ldd	r19, Y+6	; 0x06
    118c:	21 30       	cpi	r18, 0x01	; 1
    118e:	31 05       	cpc	r19, r1
    1190:	61 f5       	brne	.+88     	; 0x11ea <DIO_u8SetPinValue+0x23c>
			case DIO_u8_HIGH:
				SET_BIT(DIO_u8_PORTD_REG, Copy_u8PinId);
    1192:	a2 e3       	ldi	r26, 0x32	; 50
    1194:	b0 e0       	ldi	r27, 0x00	; 0
    1196:	e2 e3       	ldi	r30, 0x32	; 50
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	48 2f       	mov	r20, r24
    119e:	8b 81       	ldd	r24, Y+3	; 0x03
    11a0:	28 2f       	mov	r18, r24
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	02 2e       	mov	r0, r18
    11aa:	02 c0       	rjmp	.+4      	; 0x11b0 <DIO_u8SetPinValue+0x202>
    11ac:	88 0f       	add	r24, r24
    11ae:	99 1f       	adc	r25, r25
    11b0:	0a 94       	dec	r0
    11b2:	e2 f7       	brpl	.-8      	; 0x11ac <DIO_u8SetPinValue+0x1fe>
    11b4:	84 2b       	or	r24, r20
    11b6:	8c 93       	st	X, r24
    11b8:	18 c0       	rjmp	.+48     	; 0x11ea <DIO_u8SetPinValue+0x23c>
				break;
			case DIO_u8_LOW:
				CLR_BIT(DIO_u8_PORTD_REG, Copy_u8PinId);
    11ba:	a2 e3       	ldi	r26, 0x32	; 50
    11bc:	b0 e0       	ldi	r27, 0x00	; 0
    11be:	e2 e3       	ldi	r30, 0x32	; 50
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 81       	ld	r24, Z
    11c4:	48 2f       	mov	r20, r24
    11c6:	8b 81       	ldd	r24, Y+3	; 0x03
    11c8:	28 2f       	mov	r18, r24
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	02 2e       	mov	r0, r18
    11d2:	02 c0       	rjmp	.+4      	; 0x11d8 <DIO_u8SetPinValue+0x22a>
    11d4:	88 0f       	add	r24, r24
    11d6:	99 1f       	adc	r25, r25
    11d8:	0a 94       	dec	r0
    11da:	e2 f7       	brpl	.-8      	; 0x11d4 <DIO_u8SetPinValue+0x226>
    11dc:	80 95       	com	r24
    11de:	84 23       	and	r24, r20
    11e0:	8c 93       	st	X, r24
    11e2:	03 c0       	rjmp	.+6      	; 0x11ea <DIO_u8SetPinValue+0x23c>
				break;
			}
			break;
		default:
			Local_u8ErrorState = STD_TYPES_NOK;
    11e4:	19 82       	std	Y+1, r1	; 0x01
    11e6:	01 c0       	rjmp	.+2      	; 0x11ea <DIO_u8SetPinValue+0x23c>
		}
	} else {
		Local_u8ErrorState = STD_TYPES_NOK;
    11e8:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    11ea:	89 81       	ldd	r24, Y+1	; 0x01
}
    11ec:	2e 96       	adiw	r28, 0x0e	; 14
    11ee:	0f b6       	in	r0, 0x3f	; 63
    11f0:	f8 94       	cli
    11f2:	de bf       	out	0x3e, r29	; 62
    11f4:	0f be       	out	0x3f, r0	; 63
    11f6:	cd bf       	out	0x3d, r28	; 61
    11f8:	cf 91       	pop	r28
    11fa:	df 91       	pop	r29
    11fc:	08 95       	ret

000011fe <DIO_u8GetPinValue>:


u8 DIO_u8GetPinValue	(u8 Copy_u8PortId,u8 Copy_u8PinId,u8 * Copy_pu8ReturnedValue)
{
    11fe:	df 93       	push	r29
    1200:	cf 93       	push	r28
    1202:	cd b7       	in	r28, 0x3d	; 61
    1204:	de b7       	in	r29, 0x3e	; 62
    1206:	27 97       	sbiw	r28, 0x07	; 7
    1208:	0f b6       	in	r0, 0x3f	; 63
    120a:	f8 94       	cli
    120c:	de bf       	out	0x3e, r29	; 62
    120e:	0f be       	out	0x3f, r0	; 63
    1210:	cd bf       	out	0x3d, r28	; 61
    1212:	8a 83       	std	Y+2, r24	; 0x02
    1214:	6b 83       	std	Y+3, r22	; 0x03
    1216:	5d 83       	std	Y+5, r21	; 0x05
    1218:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorState = STD_TYPES_NOK;
    121a:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_u8PinId <= DIO_u8_PIN7)&&(Copy_pu8ReturnedValue != NULL))
    121c:	8b 81       	ldd	r24, Y+3	; 0x03
    121e:	88 30       	cpi	r24, 0x08	; 8
    1220:	08 f0       	brcs	.+2      	; 0x1224 <DIO_u8GetPinValue+0x26>
    1222:	79 c0       	rjmp	.+242    	; 0x1316 <DIO_u8GetPinValue+0x118>
    1224:	8c 81       	ldd	r24, Y+4	; 0x04
    1226:	9d 81       	ldd	r25, Y+5	; 0x05
    1228:	00 97       	sbiw	r24, 0x00	; 0
    122a:	09 f4       	brne	.+2      	; 0x122e <DIO_u8GetPinValue+0x30>
    122c:	74 c0       	rjmp	.+232    	; 0x1316 <DIO_u8GetPinValue+0x118>
	{
		Local_u8ErrorState = STD_TYPES_OK;
    122e:	81 e0       	ldi	r24, 0x01	; 1
    1230:	89 83       	std	Y+1, r24	; 0x01
		switch(Copy_u8PortId)
    1232:	8a 81       	ldd	r24, Y+2	; 0x02
    1234:	28 2f       	mov	r18, r24
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	3f 83       	std	Y+7, r19	; 0x07
    123a:	2e 83       	std	Y+6, r18	; 0x06
    123c:	4e 81       	ldd	r20, Y+6	; 0x06
    123e:	5f 81       	ldd	r21, Y+7	; 0x07
    1240:	41 30       	cpi	r20, 0x01	; 1
    1242:	51 05       	cpc	r21, r1
    1244:	59 f1       	breq	.+86     	; 0x129c <DIO_u8GetPinValue+0x9e>
    1246:	8e 81       	ldd	r24, Y+6	; 0x06
    1248:	9f 81       	ldd	r25, Y+7	; 0x07
    124a:	82 30       	cpi	r24, 0x02	; 2
    124c:	91 05       	cpc	r25, r1
    124e:	34 f4       	brge	.+12     	; 0x125c <DIO_u8GetPinValue+0x5e>
    1250:	2e 81       	ldd	r18, Y+6	; 0x06
    1252:	3f 81       	ldd	r19, Y+7	; 0x07
    1254:	21 15       	cp	r18, r1
    1256:	31 05       	cpc	r19, r1
    1258:	69 f0       	breq	.+26     	; 0x1274 <DIO_u8GetPinValue+0x76>
    125a:	5c c0       	rjmp	.+184    	; 0x1314 <DIO_u8GetPinValue+0x116>
    125c:	4e 81       	ldd	r20, Y+6	; 0x06
    125e:	5f 81       	ldd	r21, Y+7	; 0x07
    1260:	42 30       	cpi	r20, 0x02	; 2
    1262:	51 05       	cpc	r21, r1
    1264:	79 f1       	breq	.+94     	; 0x12c4 <DIO_u8GetPinValue+0xc6>
    1266:	8e 81       	ldd	r24, Y+6	; 0x06
    1268:	9f 81       	ldd	r25, Y+7	; 0x07
    126a:	83 30       	cpi	r24, 0x03	; 3
    126c:	91 05       	cpc	r25, r1
    126e:	09 f4       	brne	.+2      	; 0x1272 <DIO_u8GetPinValue+0x74>
    1270:	3d c0       	rjmp	.+122    	; 0x12ec <DIO_u8GetPinValue+0xee>
    1272:	50 c0       	rjmp	.+160    	; 0x1314 <DIO_u8GetPinValue+0x116>
		{
		case DIO_u8_PORTA:*Copy_pu8ReturnedValue = GET_BIT(DIO_u8_PINA_REG,Copy_u8PinId);break;
    1274:	e9 e3       	ldi	r30, 0x39	; 57
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	80 81       	ld	r24, Z
    127a:	28 2f       	mov	r18, r24
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	8b 81       	ldd	r24, Y+3	; 0x03
    1280:	88 2f       	mov	r24, r24
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	a9 01       	movw	r20, r18
    1286:	02 c0       	rjmp	.+4      	; 0x128c <DIO_u8GetPinValue+0x8e>
    1288:	55 95       	asr	r21
    128a:	47 95       	ror	r20
    128c:	8a 95       	dec	r24
    128e:	e2 f7       	brpl	.-8      	; 0x1288 <DIO_u8GetPinValue+0x8a>
    1290:	ca 01       	movw	r24, r20
    1292:	81 70       	andi	r24, 0x01	; 1
    1294:	ec 81       	ldd	r30, Y+4	; 0x04
    1296:	fd 81       	ldd	r31, Y+5	; 0x05
    1298:	80 83       	st	Z, r24
    129a:	3d c0       	rjmp	.+122    	; 0x1316 <DIO_u8GetPinValue+0x118>
		case DIO_u8_PORTB:*Copy_pu8ReturnedValue = GET_BIT(DIO_u8_PINB_REG,Copy_u8PinId);break;
    129c:	e6 e3       	ldi	r30, 0x36	; 54
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	28 2f       	mov	r18, r24
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	8b 81       	ldd	r24, Y+3	; 0x03
    12a8:	88 2f       	mov	r24, r24
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	a9 01       	movw	r20, r18
    12ae:	02 c0       	rjmp	.+4      	; 0x12b4 <DIO_u8GetPinValue+0xb6>
    12b0:	55 95       	asr	r21
    12b2:	47 95       	ror	r20
    12b4:	8a 95       	dec	r24
    12b6:	e2 f7       	brpl	.-8      	; 0x12b0 <DIO_u8GetPinValue+0xb2>
    12b8:	ca 01       	movw	r24, r20
    12ba:	81 70       	andi	r24, 0x01	; 1
    12bc:	ec 81       	ldd	r30, Y+4	; 0x04
    12be:	fd 81       	ldd	r31, Y+5	; 0x05
    12c0:	80 83       	st	Z, r24
    12c2:	29 c0       	rjmp	.+82     	; 0x1316 <DIO_u8GetPinValue+0x118>
		case DIO_u8_PORTC:*Copy_pu8ReturnedValue = GET_BIT(DIO_u8_PINC_REG,Copy_u8PinId);break;
    12c4:	e3 e3       	ldi	r30, 0x33	; 51
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	80 81       	ld	r24, Z
    12ca:	28 2f       	mov	r18, r24
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	8b 81       	ldd	r24, Y+3	; 0x03
    12d0:	88 2f       	mov	r24, r24
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	a9 01       	movw	r20, r18
    12d6:	02 c0       	rjmp	.+4      	; 0x12dc <DIO_u8GetPinValue+0xde>
    12d8:	55 95       	asr	r21
    12da:	47 95       	ror	r20
    12dc:	8a 95       	dec	r24
    12de:	e2 f7       	brpl	.-8      	; 0x12d8 <DIO_u8GetPinValue+0xda>
    12e0:	ca 01       	movw	r24, r20
    12e2:	81 70       	andi	r24, 0x01	; 1
    12e4:	ec 81       	ldd	r30, Y+4	; 0x04
    12e6:	fd 81       	ldd	r31, Y+5	; 0x05
    12e8:	80 83       	st	Z, r24
    12ea:	15 c0       	rjmp	.+42     	; 0x1316 <DIO_u8GetPinValue+0x118>
		case DIO_u8_PORTD:*Copy_pu8ReturnedValue = GET_BIT(DIO_u8_PIND_REG,Copy_u8PinId);break;
    12ec:	e0 e3       	ldi	r30, 0x30	; 48
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	28 2f       	mov	r18, r24
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	8b 81       	ldd	r24, Y+3	; 0x03
    12f8:	88 2f       	mov	r24, r24
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	a9 01       	movw	r20, r18
    12fe:	02 c0       	rjmp	.+4      	; 0x1304 <DIO_u8GetPinValue+0x106>
    1300:	55 95       	asr	r21
    1302:	47 95       	ror	r20
    1304:	8a 95       	dec	r24
    1306:	e2 f7       	brpl	.-8      	; 0x1300 <DIO_u8GetPinValue+0x102>
    1308:	ca 01       	movw	r24, r20
    130a:	81 70       	andi	r24, 0x01	; 1
    130c:	ec 81       	ldd	r30, Y+4	; 0x04
    130e:	fd 81       	ldd	r31, Y+5	; 0x05
    1310:	80 83       	st	Z, r24
    1312:	01 c0       	rjmp	.+2      	; 0x1316 <DIO_u8GetPinValue+0x118>
		default 	:Local_u8ErrorState = STD_TYPES_NOK;
    1314:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	return Local_u8ErrorState;
    1316:	89 81       	ldd	r24, Y+1	; 0x01

}
    1318:	27 96       	adiw	r28, 0x07	; 7
    131a:	0f b6       	in	r0, 0x3f	; 63
    131c:	f8 94       	cli
    131e:	de bf       	out	0x3e, r29	; 62
    1320:	0f be       	out	0x3f, r0	; 63
    1322:	cd bf       	out	0x3d, r28	; 61
    1324:	cf 91       	pop	r28
    1326:	df 91       	pop	r29
    1328:	08 95       	ret

0000132a <DIO_u8TogPinValue>:

u8 DIO_u8TogPinValue	(u8 Copy_u8PortId,u8 Copy_u8PinId)
{
    132a:	df 93       	push	r29
    132c:	cf 93       	push	r28
    132e:	00 d0       	rcall	.+0      	; 0x1330 <DIO_u8TogPinValue+0x6>
    1330:	00 d0       	rcall	.+0      	; 0x1332 <DIO_u8TogPinValue+0x8>
    1332:	0f 92       	push	r0
    1334:	cd b7       	in	r28, 0x3d	; 61
    1336:	de b7       	in	r29, 0x3e	; 62
    1338:	8a 83       	std	Y+2, r24	; 0x02
    133a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    133c:	81 e0       	ldi	r24, 0x01	; 1
    133e:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8PinId <= DIO_u8_PIN7)
    1340:	8b 81       	ldd	r24, Y+3	; 0x03
    1342:	88 30       	cpi	r24, 0x08	; 8
    1344:	08 f0       	brcs	.+2      	; 0x1348 <DIO_u8TogPinValue+0x1e>
    1346:	6f c0       	rjmp	.+222    	; 0x1426 <DIO_u8TogPinValue+0xfc>
	{
		switch(Copy_u8PortId)
    1348:	8a 81       	ldd	r24, Y+2	; 0x02
    134a:	28 2f       	mov	r18, r24
    134c:	30 e0       	ldi	r19, 0x00	; 0
    134e:	3d 83       	std	Y+5, r19	; 0x05
    1350:	2c 83       	std	Y+4, r18	; 0x04
    1352:	8c 81       	ldd	r24, Y+4	; 0x04
    1354:	9d 81       	ldd	r25, Y+5	; 0x05
    1356:	81 30       	cpi	r24, 0x01	; 1
    1358:	91 05       	cpc	r25, r1
    135a:	49 f1       	breq	.+82     	; 0x13ae <DIO_u8TogPinValue+0x84>
    135c:	2c 81       	ldd	r18, Y+4	; 0x04
    135e:	3d 81       	ldd	r19, Y+5	; 0x05
    1360:	22 30       	cpi	r18, 0x02	; 2
    1362:	31 05       	cpc	r19, r1
    1364:	2c f4       	brge	.+10     	; 0x1370 <DIO_u8TogPinValue+0x46>
    1366:	8c 81       	ldd	r24, Y+4	; 0x04
    1368:	9d 81       	ldd	r25, Y+5	; 0x05
    136a:	00 97       	sbiw	r24, 0x00	; 0
    136c:	61 f0       	breq	.+24     	; 0x1386 <DIO_u8TogPinValue+0x5c>
    136e:	5c c0       	rjmp	.+184    	; 0x1428 <DIO_u8TogPinValue+0xfe>
    1370:	2c 81       	ldd	r18, Y+4	; 0x04
    1372:	3d 81       	ldd	r19, Y+5	; 0x05
    1374:	22 30       	cpi	r18, 0x02	; 2
    1376:	31 05       	cpc	r19, r1
    1378:	71 f1       	breq	.+92     	; 0x13d6 <DIO_u8TogPinValue+0xac>
    137a:	8c 81       	ldd	r24, Y+4	; 0x04
    137c:	9d 81       	ldd	r25, Y+5	; 0x05
    137e:	83 30       	cpi	r24, 0x03	; 3
    1380:	91 05       	cpc	r25, r1
    1382:	e9 f1       	breq	.+122    	; 0x13fe <DIO_u8TogPinValue+0xd4>
    1384:	51 c0       	rjmp	.+162    	; 0x1428 <DIO_u8TogPinValue+0xfe>
		{
		case DIO_u8_PORTA:TOG_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);break;
    1386:	ab e3       	ldi	r26, 0x3B	; 59
    1388:	b0 e0       	ldi	r27, 0x00	; 0
    138a:	eb e3       	ldi	r30, 0x3B	; 59
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	48 2f       	mov	r20, r24
    1392:	8b 81       	ldd	r24, Y+3	; 0x03
    1394:	28 2f       	mov	r18, r24
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	02 2e       	mov	r0, r18
    139e:	02 c0       	rjmp	.+4      	; 0x13a4 <DIO_u8TogPinValue+0x7a>
    13a0:	88 0f       	add	r24, r24
    13a2:	99 1f       	adc	r25, r25
    13a4:	0a 94       	dec	r0
    13a6:	e2 f7       	brpl	.-8      	; 0x13a0 <DIO_u8TogPinValue+0x76>
    13a8:	84 27       	eor	r24, r20
    13aa:	8c 93       	st	X, r24
    13ac:	3d c0       	rjmp	.+122    	; 0x1428 <DIO_u8TogPinValue+0xfe>
		case DIO_u8_PORTB:TOG_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);break;
    13ae:	a8 e3       	ldi	r26, 0x38	; 56
    13b0:	b0 e0       	ldi	r27, 0x00	; 0
    13b2:	e8 e3       	ldi	r30, 0x38	; 56
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	80 81       	ld	r24, Z
    13b8:	48 2f       	mov	r20, r24
    13ba:	8b 81       	ldd	r24, Y+3	; 0x03
    13bc:	28 2f       	mov	r18, r24
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	02 2e       	mov	r0, r18
    13c6:	02 c0       	rjmp	.+4      	; 0x13cc <DIO_u8TogPinValue+0xa2>
    13c8:	88 0f       	add	r24, r24
    13ca:	99 1f       	adc	r25, r25
    13cc:	0a 94       	dec	r0
    13ce:	e2 f7       	brpl	.-8      	; 0x13c8 <DIO_u8TogPinValue+0x9e>
    13d0:	84 27       	eor	r24, r20
    13d2:	8c 93       	st	X, r24
    13d4:	29 c0       	rjmp	.+82     	; 0x1428 <DIO_u8TogPinValue+0xfe>
		case DIO_u8_PORTC:TOG_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);break;
    13d6:	a5 e3       	ldi	r26, 0x35	; 53
    13d8:	b0 e0       	ldi	r27, 0x00	; 0
    13da:	e5 e3       	ldi	r30, 0x35	; 53
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	48 2f       	mov	r20, r24
    13e2:	8b 81       	ldd	r24, Y+3	; 0x03
    13e4:	28 2f       	mov	r18, r24
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	02 2e       	mov	r0, r18
    13ee:	02 c0       	rjmp	.+4      	; 0x13f4 <DIO_u8TogPinValue+0xca>
    13f0:	88 0f       	add	r24, r24
    13f2:	99 1f       	adc	r25, r25
    13f4:	0a 94       	dec	r0
    13f6:	e2 f7       	brpl	.-8      	; 0x13f0 <DIO_u8TogPinValue+0xc6>
    13f8:	84 27       	eor	r24, r20
    13fa:	8c 93       	st	X, r24
    13fc:	15 c0       	rjmp	.+42     	; 0x1428 <DIO_u8TogPinValue+0xfe>
		case DIO_u8_PORTD:TOG_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);break;
    13fe:	a2 e3       	ldi	r26, 0x32	; 50
    1400:	b0 e0       	ldi	r27, 0x00	; 0
    1402:	e2 e3       	ldi	r30, 0x32	; 50
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	80 81       	ld	r24, Z
    1408:	48 2f       	mov	r20, r24
    140a:	8b 81       	ldd	r24, Y+3	; 0x03
    140c:	28 2f       	mov	r18, r24
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	81 e0       	ldi	r24, 0x01	; 1
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	02 2e       	mov	r0, r18
    1416:	02 c0       	rjmp	.+4      	; 0x141c <DIO_u8TogPinValue+0xf2>
    1418:	88 0f       	add	r24, r24
    141a:	99 1f       	adc	r25, r25
    141c:	0a 94       	dec	r0
    141e:	e2 f7       	brpl	.-8      	; 0x1418 <DIO_u8TogPinValue+0xee>
    1420:	84 27       	eor	r24, r20
    1422:	8c 93       	st	X, r24
    1424:	01 c0       	rjmp	.+2      	; 0x1428 <DIO_u8TogPinValue+0xfe>
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    1426:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1428:	89 81       	ldd	r24, Y+1	; 0x01
}
    142a:	0f 90       	pop	r0
    142c:	0f 90       	pop	r0
    142e:	0f 90       	pop	r0
    1430:	0f 90       	pop	r0
    1432:	0f 90       	pop	r0
    1434:	cf 91       	pop	r28
    1436:	df 91       	pop	r29
    1438:	08 95       	ret

0000143a <DIO_u8SetPortDirection>:


u8 DIO_u8SetPortDirection(u8 Copy_u8PortId,u8 Copy_u8PortDirection)
{
    143a:	df 93       	push	r29
    143c:	cf 93       	push	r28
    143e:	cd b7       	in	r28, 0x3d	; 61
    1440:	de b7       	in	r29, 0x3e	; 62
    1442:	2d 97       	sbiw	r28, 0x0d	; 13
    1444:	0f b6       	in	r0, 0x3f	; 63
    1446:	f8 94       	cli
    1448:	de bf       	out	0x3e, r29	; 62
    144a:	0f be       	out	0x3f, r0	; 63
    144c:	cd bf       	out	0x3d, r28	; 61
    144e:	8a 83       	std	Y+2, r24	; 0x02
    1450:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1452:	81 e0       	ldi	r24, 0x01	; 1
    1454:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortId)
    1456:	8a 81       	ldd	r24, Y+2	; 0x02
    1458:	28 2f       	mov	r18, r24
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	3d 87       	std	Y+13, r19	; 0x0d
    145e:	2c 87       	std	Y+12, r18	; 0x0c
    1460:	8c 85       	ldd	r24, Y+12	; 0x0c
    1462:	9d 85       	ldd	r25, Y+13	; 0x0d
    1464:	81 30       	cpi	r24, 0x01	; 1
    1466:	91 05       	cpc	r25, r1
    1468:	d1 f1       	breq	.+116    	; 0x14de <DIO_u8SetPortDirection+0xa4>
    146a:	2c 85       	ldd	r18, Y+12	; 0x0c
    146c:	3d 85       	ldd	r19, Y+13	; 0x0d
    146e:	22 30       	cpi	r18, 0x02	; 2
    1470:	31 05       	cpc	r19, r1
    1472:	2c f4       	brge	.+10     	; 0x147e <DIO_u8SetPortDirection+0x44>
    1474:	8c 85       	ldd	r24, Y+12	; 0x0c
    1476:	9d 85       	ldd	r25, Y+13	; 0x0d
    1478:	00 97       	sbiw	r24, 0x00	; 0
    147a:	71 f0       	breq	.+28     	; 0x1498 <DIO_u8SetPortDirection+0x5e>
    147c:	99 c0       	rjmp	.+306    	; 0x15b0 <DIO_u8SetPortDirection+0x176>
    147e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1480:	3d 85       	ldd	r19, Y+13	; 0x0d
    1482:	22 30       	cpi	r18, 0x02	; 2
    1484:	31 05       	cpc	r19, r1
    1486:	09 f4       	brne	.+2      	; 0x148a <DIO_u8SetPortDirection+0x50>
    1488:	4d c0       	rjmp	.+154    	; 0x1524 <DIO_u8SetPortDirection+0xea>
    148a:	8c 85       	ldd	r24, Y+12	; 0x0c
    148c:	9d 85       	ldd	r25, Y+13	; 0x0d
    148e:	83 30       	cpi	r24, 0x03	; 3
    1490:	91 05       	cpc	r25, r1
    1492:	09 f4       	brne	.+2      	; 0x1496 <DIO_u8SetPortDirection+0x5c>
    1494:	6a c0       	rjmp	.+212    	; 0x156a <DIO_u8SetPortDirection+0x130>
    1496:	8c c0       	rjmp	.+280    	; 0x15b0 <DIO_u8SetPortDirection+0x176>
	{
	case DIO_u8_PORTA:
		switch(Copy_u8PortDirection)
    1498:	8b 81       	ldd	r24, Y+3	; 0x03
    149a:	28 2f       	mov	r18, r24
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	3b 87       	std	Y+11, r19	; 0x0b
    14a0:	2a 87       	std	Y+10, r18	; 0x0a
    14a2:	8a 85       	ldd	r24, Y+10	; 0x0a
    14a4:	9b 85       	ldd	r25, Y+11	; 0x0b
    14a6:	81 30       	cpi	r24, 0x01	; 1
    14a8:	91 05       	cpc	r25, r1
    14aa:	91 f0       	breq	.+36     	; 0x14d0 <DIO_u8SetPortDirection+0x96>
    14ac:	2a 85       	ldd	r18, Y+10	; 0x0a
    14ae:	3b 85       	ldd	r19, Y+11	; 0x0b
    14b0:	22 30       	cpi	r18, 0x02	; 2
    14b2:	31 05       	cpc	r19, r1
    14b4:	29 f0       	breq	.+10     	; 0x14c0 <DIO_u8SetPortDirection+0x86>
    14b6:	8a 85       	ldd	r24, Y+10	; 0x0a
    14b8:	9b 85       	ldd	r25, Y+11	; 0x0b
    14ba:	00 97       	sbiw	r24, 0x00	; 0
    14bc:	29 f0       	breq	.+10     	; 0x14c8 <DIO_u8SetPortDirection+0x8e>
    14be:	0d c0       	rjmp	.+26     	; 0x14da <DIO_u8SetPortDirection+0xa0>
		{
		case DIO_u8_INPUT_PULLED_UP:DIO_u8_PORTA_REG = 0xff;
    14c0:	eb e3       	ldi	r30, 0x3B	; 59
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	8f ef       	ldi	r24, 0xFF	; 255
    14c6:	80 83       	st	Z, r24
		case DIO_u8_INPUT_FLOATING :DIO_u8_DDRA_REG  = 0x00;break;
    14c8:	ea e3       	ldi	r30, 0x3A	; 58
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	10 82       	st	Z, r1
    14ce:	71 c0       	rjmp	.+226    	; 0x15b2 <DIO_u8SetPortDirection+0x178>
		case DIO_u8_OUTPUT		   :DIO_u8_DDRA_REG  = 0xff;break;
    14d0:	ea e3       	ldi	r30, 0x3A	; 58
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	8f ef       	ldi	r24, 0xFF	; 255
    14d6:	80 83       	st	Z, r24
    14d8:	6c c0       	rjmp	.+216    	; 0x15b2 <DIO_u8SetPortDirection+0x178>
		default					   :Local_u8ErrorState = STD_TYPES_NOK;
    14da:	19 82       	std	Y+1, r1	; 0x01
    14dc:	6a c0       	rjmp	.+212    	; 0x15b2 <DIO_u8SetPortDirection+0x178>

		}
		break;
		case DIO_u8_PORTB:
			switch(Copy_u8PortDirection)
    14de:	8b 81       	ldd	r24, Y+3	; 0x03
    14e0:	28 2f       	mov	r18, r24
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	39 87       	std	Y+9, r19	; 0x09
    14e6:	28 87       	std	Y+8, r18	; 0x08
    14e8:	88 85       	ldd	r24, Y+8	; 0x08
    14ea:	99 85       	ldd	r25, Y+9	; 0x09
    14ec:	81 30       	cpi	r24, 0x01	; 1
    14ee:	91 05       	cpc	r25, r1
    14f0:	91 f0       	breq	.+36     	; 0x1516 <DIO_u8SetPortDirection+0xdc>
    14f2:	28 85       	ldd	r18, Y+8	; 0x08
    14f4:	39 85       	ldd	r19, Y+9	; 0x09
    14f6:	22 30       	cpi	r18, 0x02	; 2
    14f8:	31 05       	cpc	r19, r1
    14fa:	29 f0       	breq	.+10     	; 0x1506 <DIO_u8SetPortDirection+0xcc>
    14fc:	88 85       	ldd	r24, Y+8	; 0x08
    14fe:	99 85       	ldd	r25, Y+9	; 0x09
    1500:	00 97       	sbiw	r24, 0x00	; 0
    1502:	29 f0       	breq	.+10     	; 0x150e <DIO_u8SetPortDirection+0xd4>
    1504:	0d c0       	rjmp	.+26     	; 0x1520 <DIO_u8SetPortDirection+0xe6>
			{
			case DIO_u8_INPUT_PULLED_UP:DIO_u8_PORTB_REG = 0xff;
    1506:	e8 e3       	ldi	r30, 0x38	; 56
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	8f ef       	ldi	r24, 0xFF	; 255
    150c:	80 83       	st	Z, r24
			case DIO_u8_INPUT_FLOATING :DIO_u8_DDRB_REG  = 0x00;break;
    150e:	e7 e3       	ldi	r30, 0x37	; 55
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	10 82       	st	Z, r1
    1514:	4e c0       	rjmp	.+156    	; 0x15b2 <DIO_u8SetPortDirection+0x178>
			case DIO_u8_OUTPUT		   :DIO_u8_DDRB_REG  = 0xff;break;
    1516:	e7 e3       	ldi	r30, 0x37	; 55
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	8f ef       	ldi	r24, 0xFF	; 255
    151c:	80 83       	st	Z, r24
    151e:	49 c0       	rjmp	.+146    	; 0x15b2 <DIO_u8SetPortDirection+0x178>
			default					   :Local_u8ErrorState = STD_TYPES_NOK;
    1520:	19 82       	std	Y+1, r1	; 0x01
    1522:	47 c0       	rjmp	.+142    	; 0x15b2 <DIO_u8SetPortDirection+0x178>

			}
			break;
		case DIO_u8_PORTC:
			switch(Copy_u8PortDirection)
    1524:	8b 81       	ldd	r24, Y+3	; 0x03
    1526:	28 2f       	mov	r18, r24
    1528:	30 e0       	ldi	r19, 0x00	; 0
    152a:	3f 83       	std	Y+7, r19	; 0x07
    152c:	2e 83       	std	Y+6, r18	; 0x06
    152e:	8e 81       	ldd	r24, Y+6	; 0x06
    1530:	9f 81       	ldd	r25, Y+7	; 0x07
    1532:	81 30       	cpi	r24, 0x01	; 1
    1534:	91 05       	cpc	r25, r1
    1536:	91 f0       	breq	.+36     	; 0x155c <DIO_u8SetPortDirection+0x122>
    1538:	2e 81       	ldd	r18, Y+6	; 0x06
    153a:	3f 81       	ldd	r19, Y+7	; 0x07
    153c:	22 30       	cpi	r18, 0x02	; 2
    153e:	31 05       	cpc	r19, r1
    1540:	29 f0       	breq	.+10     	; 0x154c <DIO_u8SetPortDirection+0x112>
    1542:	8e 81       	ldd	r24, Y+6	; 0x06
    1544:	9f 81       	ldd	r25, Y+7	; 0x07
    1546:	00 97       	sbiw	r24, 0x00	; 0
    1548:	29 f0       	breq	.+10     	; 0x1554 <DIO_u8SetPortDirection+0x11a>
    154a:	0d c0       	rjmp	.+26     	; 0x1566 <DIO_u8SetPortDirection+0x12c>
			{
			case DIO_u8_INPUT_PULLED_UP:DIO_u8_PORTC_REG = 0xff;
    154c:	e5 e3       	ldi	r30, 0x35	; 53
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	8f ef       	ldi	r24, 0xFF	; 255
    1552:	80 83       	st	Z, r24
			case DIO_u8_INPUT_FLOATING :DIO_u8_DDRC_REG  = 0x00;break;
    1554:	e4 e3       	ldi	r30, 0x34	; 52
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	10 82       	st	Z, r1
    155a:	2b c0       	rjmp	.+86     	; 0x15b2 <DIO_u8SetPortDirection+0x178>
			case DIO_u8_OUTPUT		   :DIO_u8_DDRC_REG  = 0xff;break;
    155c:	e4 e3       	ldi	r30, 0x34	; 52
    155e:	f0 e0       	ldi	r31, 0x00	; 0
    1560:	8f ef       	ldi	r24, 0xFF	; 255
    1562:	80 83       	st	Z, r24
    1564:	26 c0       	rjmp	.+76     	; 0x15b2 <DIO_u8SetPortDirection+0x178>
			default					   :Local_u8ErrorState = STD_TYPES_NOK;
    1566:	19 82       	std	Y+1, r1	; 0x01
    1568:	24 c0       	rjmp	.+72     	; 0x15b2 <DIO_u8SetPortDirection+0x178>

			}
			break;
		case DIO_u8_PORTD:
			switch(Copy_u8PortDirection)
    156a:	8b 81       	ldd	r24, Y+3	; 0x03
    156c:	28 2f       	mov	r18, r24
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	3d 83       	std	Y+5, r19	; 0x05
    1572:	2c 83       	std	Y+4, r18	; 0x04
    1574:	8c 81       	ldd	r24, Y+4	; 0x04
    1576:	9d 81       	ldd	r25, Y+5	; 0x05
    1578:	81 30       	cpi	r24, 0x01	; 1
    157a:	91 05       	cpc	r25, r1
    157c:	91 f0       	breq	.+36     	; 0x15a2 <DIO_u8SetPortDirection+0x168>
    157e:	2c 81       	ldd	r18, Y+4	; 0x04
    1580:	3d 81       	ldd	r19, Y+5	; 0x05
    1582:	22 30       	cpi	r18, 0x02	; 2
    1584:	31 05       	cpc	r19, r1
    1586:	29 f0       	breq	.+10     	; 0x1592 <DIO_u8SetPortDirection+0x158>
    1588:	8c 81       	ldd	r24, Y+4	; 0x04
    158a:	9d 81       	ldd	r25, Y+5	; 0x05
    158c:	00 97       	sbiw	r24, 0x00	; 0
    158e:	29 f0       	breq	.+10     	; 0x159a <DIO_u8SetPortDirection+0x160>
    1590:	0d c0       	rjmp	.+26     	; 0x15ac <DIO_u8SetPortDirection+0x172>
			{
			case DIO_u8_INPUT_PULLED_UP:DIO_u8_PORTD_REG = 0xff;
    1592:	e2 e3       	ldi	r30, 0x32	; 50
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	8f ef       	ldi	r24, 0xFF	; 255
    1598:	80 83       	st	Z, r24
			case DIO_u8_INPUT_FLOATING :DIO_u8_DDRD_REG  = 0x00;break;
    159a:	e1 e3       	ldi	r30, 0x31	; 49
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	10 82       	st	Z, r1
    15a0:	08 c0       	rjmp	.+16     	; 0x15b2 <DIO_u8SetPortDirection+0x178>
			case DIO_u8_OUTPUT		   :DIO_u8_DDRD_REG  = 0xff;break;
    15a2:	e1 e3       	ldi	r30, 0x31	; 49
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	8f ef       	ldi	r24, 0xFF	; 255
    15a8:	80 83       	st	Z, r24
    15aa:	03 c0       	rjmp	.+6      	; 0x15b2 <DIO_u8SetPortDirection+0x178>
			default					   :Local_u8ErrorState = STD_TYPES_NOK;
    15ac:	19 82       	std	Y+1, r1	; 0x01
    15ae:	01 c0       	rjmp	.+2      	; 0x15b2 <DIO_u8SetPortDirection+0x178>

			}
			break;
			default : Local_u8ErrorState = STD_TYPES_NOK;
    15b0:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    15b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    15b4:	2d 96       	adiw	r28, 0x0d	; 13
    15b6:	0f b6       	in	r0, 0x3f	; 63
    15b8:	f8 94       	cli
    15ba:	de bf       	out	0x3e, r29	; 62
    15bc:	0f be       	out	0x3f, r0	; 63
    15be:	cd bf       	out	0x3d, r28	; 61
    15c0:	cf 91       	pop	r28
    15c2:	df 91       	pop	r29
    15c4:	08 95       	ret

000015c6 <DIO_u8SetPortValue>:

u8 DIO_u8SetPortValue	 (u8 Copy_u8PortId,u8 Copy_u8PortValue)
{
    15c6:	df 93       	push	r29
    15c8:	cf 93       	push	r28
    15ca:	00 d0       	rcall	.+0      	; 0x15cc <DIO_u8SetPortValue+0x6>
    15cc:	00 d0       	rcall	.+0      	; 0x15ce <DIO_u8SetPortValue+0x8>
    15ce:	0f 92       	push	r0
    15d0:	cd b7       	in	r28, 0x3d	; 61
    15d2:	de b7       	in	r29, 0x3e	; 62
    15d4:	8a 83       	std	Y+2, r24	; 0x02
    15d6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    15d8:	81 e0       	ldi	r24, 0x01	; 1
    15da:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_u8PortId)
    15dc:	8a 81       	ldd	r24, Y+2	; 0x02
    15de:	28 2f       	mov	r18, r24
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	3d 83       	std	Y+5, r19	; 0x05
    15e4:	2c 83       	std	Y+4, r18	; 0x04
    15e6:	8c 81       	ldd	r24, Y+4	; 0x04
    15e8:	9d 81       	ldd	r25, Y+5	; 0x05
    15ea:	81 30       	cpi	r24, 0x01	; 1
    15ec:	91 05       	cpc	r25, r1
    15ee:	d1 f0       	breq	.+52     	; 0x1624 <DIO_u8SetPortValue+0x5e>
    15f0:	2c 81       	ldd	r18, Y+4	; 0x04
    15f2:	3d 81       	ldd	r19, Y+5	; 0x05
    15f4:	22 30       	cpi	r18, 0x02	; 2
    15f6:	31 05       	cpc	r19, r1
    15f8:	2c f4       	brge	.+10     	; 0x1604 <DIO_u8SetPortValue+0x3e>
    15fa:	8c 81       	ldd	r24, Y+4	; 0x04
    15fc:	9d 81       	ldd	r25, Y+5	; 0x05
    15fe:	00 97       	sbiw	r24, 0x00	; 0
    1600:	61 f0       	breq	.+24     	; 0x161a <DIO_u8SetPortValue+0x54>
    1602:	1f c0       	rjmp	.+62     	; 0x1642 <DIO_u8SetPortValue+0x7c>
    1604:	2c 81       	ldd	r18, Y+4	; 0x04
    1606:	3d 81       	ldd	r19, Y+5	; 0x05
    1608:	22 30       	cpi	r18, 0x02	; 2
    160a:	31 05       	cpc	r19, r1
    160c:	81 f0       	breq	.+32     	; 0x162e <DIO_u8SetPortValue+0x68>
    160e:	8c 81       	ldd	r24, Y+4	; 0x04
    1610:	9d 81       	ldd	r25, Y+5	; 0x05
    1612:	83 30       	cpi	r24, 0x03	; 3
    1614:	91 05       	cpc	r25, r1
    1616:	81 f0       	breq	.+32     	; 0x1638 <DIO_u8SetPortValue+0x72>
    1618:	14 c0       	rjmp	.+40     	; 0x1642 <DIO_u8SetPortValue+0x7c>
	{
	case DIO_u8_PORTA:DIO_u8_PORTA_REG = Copy_u8PortValue;break;
    161a:	eb e3       	ldi	r30, 0x3B	; 59
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	8b 81       	ldd	r24, Y+3	; 0x03
    1620:	80 83       	st	Z, r24
    1622:	10 c0       	rjmp	.+32     	; 0x1644 <DIO_u8SetPortValue+0x7e>
	case DIO_u8_PORTB:DIO_u8_PORTB_REG = Copy_u8PortValue;break;
    1624:	e8 e3       	ldi	r30, 0x38	; 56
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	8b 81       	ldd	r24, Y+3	; 0x03
    162a:	80 83       	st	Z, r24
    162c:	0b c0       	rjmp	.+22     	; 0x1644 <DIO_u8SetPortValue+0x7e>
	case DIO_u8_PORTC:DIO_u8_PORTC_REG = Copy_u8PortValue;break;
    162e:	e5 e3       	ldi	r30, 0x35	; 53
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	8b 81       	ldd	r24, Y+3	; 0x03
    1634:	80 83       	st	Z, r24
    1636:	06 c0       	rjmp	.+12     	; 0x1644 <DIO_u8SetPortValue+0x7e>
	case DIO_u8_PORTD:DIO_u8_PORTD_REG = Copy_u8PortValue;break;
    1638:	e2 e3       	ldi	r30, 0x32	; 50
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	8b 81       	ldd	r24, Y+3	; 0x03
    163e:	80 83       	st	Z, r24
    1640:	01 c0       	rjmp	.+2      	; 0x1644 <DIO_u8SetPortValue+0x7e>
	default 	:Local_u8ErrorState = STD_TYPES_NOK;
    1642:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
    1644:	89 81       	ldd	r24, Y+1	; 0x01
}
    1646:	0f 90       	pop	r0
    1648:	0f 90       	pop	r0
    164a:	0f 90       	pop	r0
    164c:	0f 90       	pop	r0
    164e:	0f 90       	pop	r0
    1650:	cf 91       	pop	r28
    1652:	df 91       	pop	r29
    1654:	08 95       	ret

00001656 <DIO_u8GetPortValue>:

u8 DIO_u8GetPortValue	 (u8 Copy_u8PortId,u8 * Copy_pu8PortValue)
{
    1656:	df 93       	push	r29
    1658:	cf 93       	push	r28
    165a:	00 d0       	rcall	.+0      	; 0x165c <DIO_u8GetPortValue+0x6>
    165c:	00 d0       	rcall	.+0      	; 0x165e <DIO_u8GetPortValue+0x8>
    165e:	00 d0       	rcall	.+0      	; 0x1660 <DIO_u8GetPortValue+0xa>
    1660:	cd b7       	in	r28, 0x3d	; 61
    1662:	de b7       	in	r29, 0x3e	; 62
    1664:	8a 83       	std	Y+2, r24	; 0x02
    1666:	7c 83       	std	Y+4, r23	; 0x04
    1668:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    166a:	81 e0       	ldi	r24, 0x01	; 1
    166c:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_pu8PortValue != NULL)
    166e:	8b 81       	ldd	r24, Y+3	; 0x03
    1670:	9c 81       	ldd	r25, Y+4	; 0x04
    1672:	00 97       	sbiw	r24, 0x00	; 0
    1674:	e1 f1       	breq	.+120    	; 0x16ee <DIO_u8GetPortValue+0x98>
	{
		switch(Copy_u8PortId)
    1676:	8a 81       	ldd	r24, Y+2	; 0x02
    1678:	28 2f       	mov	r18, r24
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	3e 83       	std	Y+6, r19	; 0x06
    167e:	2d 83       	std	Y+5, r18	; 0x05
    1680:	8d 81       	ldd	r24, Y+5	; 0x05
    1682:	9e 81       	ldd	r25, Y+6	; 0x06
    1684:	81 30       	cpi	r24, 0x01	; 1
    1686:	91 05       	cpc	r25, r1
    1688:	e1 f0       	breq	.+56     	; 0x16c2 <DIO_u8GetPortValue+0x6c>
    168a:	2d 81       	ldd	r18, Y+5	; 0x05
    168c:	3e 81       	ldd	r19, Y+6	; 0x06
    168e:	22 30       	cpi	r18, 0x02	; 2
    1690:	31 05       	cpc	r19, r1
    1692:	2c f4       	brge	.+10     	; 0x169e <DIO_u8GetPortValue+0x48>
    1694:	8d 81       	ldd	r24, Y+5	; 0x05
    1696:	9e 81       	ldd	r25, Y+6	; 0x06
    1698:	00 97       	sbiw	r24, 0x00	; 0
    169a:	61 f0       	breq	.+24     	; 0x16b4 <DIO_u8GetPortValue+0x5e>
    169c:	27 c0       	rjmp	.+78     	; 0x16ec <DIO_u8GetPortValue+0x96>
    169e:	2d 81       	ldd	r18, Y+5	; 0x05
    16a0:	3e 81       	ldd	r19, Y+6	; 0x06
    16a2:	22 30       	cpi	r18, 0x02	; 2
    16a4:	31 05       	cpc	r19, r1
    16a6:	a1 f0       	breq	.+40     	; 0x16d0 <DIO_u8GetPortValue+0x7a>
    16a8:	8d 81       	ldd	r24, Y+5	; 0x05
    16aa:	9e 81       	ldd	r25, Y+6	; 0x06
    16ac:	83 30       	cpi	r24, 0x03	; 3
    16ae:	91 05       	cpc	r25, r1
    16b0:	b1 f0       	breq	.+44     	; 0x16de <DIO_u8GetPortValue+0x88>
    16b2:	1c c0       	rjmp	.+56     	; 0x16ec <DIO_u8GetPortValue+0x96>
		{
		case DIO_u8_PORTA:*Copy_pu8PortValue = DIO_u8_PINA_REG;break;
    16b4:	e9 e3       	ldi	r30, 0x39	; 57
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	80 81       	ld	r24, Z
    16ba:	eb 81       	ldd	r30, Y+3	; 0x03
    16bc:	fc 81       	ldd	r31, Y+4	; 0x04
    16be:	80 83       	st	Z, r24
    16c0:	16 c0       	rjmp	.+44     	; 0x16ee <DIO_u8GetPortValue+0x98>
		case DIO_u8_PORTB:*Copy_pu8PortValue = DIO_u8_PINB_REG;break;
    16c2:	e6 e3       	ldi	r30, 0x36	; 54
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	80 81       	ld	r24, Z
    16c8:	eb 81       	ldd	r30, Y+3	; 0x03
    16ca:	fc 81       	ldd	r31, Y+4	; 0x04
    16cc:	80 83       	st	Z, r24
    16ce:	0f c0       	rjmp	.+30     	; 0x16ee <DIO_u8GetPortValue+0x98>
		case DIO_u8_PORTC:*Copy_pu8PortValue = DIO_u8_PINC_REG;break;
    16d0:	e3 e3       	ldi	r30, 0x33	; 51
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	80 81       	ld	r24, Z
    16d6:	eb 81       	ldd	r30, Y+3	; 0x03
    16d8:	fc 81       	ldd	r31, Y+4	; 0x04
    16da:	80 83       	st	Z, r24
    16dc:	08 c0       	rjmp	.+16     	; 0x16ee <DIO_u8GetPortValue+0x98>
		case DIO_u8_PORTD:*Copy_pu8PortValue = DIO_u8_PIND_REG;break;
    16de:	e0 e3       	ldi	r30, 0x30	; 48
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	80 81       	ld	r24, Z
    16e4:	eb 81       	ldd	r30, Y+3	; 0x03
    16e6:	fc 81       	ldd	r31, Y+4	; 0x04
    16e8:	80 83       	st	Z, r24
    16ea:	01 c0       	rjmp	.+2      	; 0x16ee <DIO_u8GetPortValue+0x98>
		default			 :Local_u8ErrorState = STD_TYPES_NOK;
    16ec:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	return Local_u8ErrorState;
    16ee:	89 81       	ldd	r24, Y+1	; 0x01

}
    16f0:	26 96       	adiw	r28, 0x06	; 6
    16f2:	0f b6       	in	r0, 0x3f	; 63
    16f4:	f8 94       	cli
    16f6:	de bf       	out	0x3e, r29	; 62
    16f8:	0f be       	out	0x3f, r0	; 63
    16fa:	cd bf       	out	0x3d, r28	; 61
    16fc:	cf 91       	pop	r28
    16fe:	df 91       	pop	r29
    1700:	08 95       	ret

00001702 <DIO_u8Init>:

void DIO_u8Init         (void)
{
    1702:	df 93       	push	r29
    1704:	cf 93       	push	r28
    1706:	cd b7       	in	r28, 0x3d	; 61
    1708:	de b7       	in	r29, 0x3e	; 62
	/*Direction DDR*/
DIO_u8_DDRA_REG = PRIVATE_u8_CONC(DIO_u8_PA7_DIRECTION,DIO_u8_PA6_DIRECTION,DIO_u8_PA5_DIRECTION,DIO_u8_PA4_DIRECTION,
    170a:	ea e3       	ldi	r30, 0x3A	; 58
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	80 ef       	ldi	r24, 0xF0	; 240
    1710:	80 83       	st	Z, r24
		                          DIO_u8_PA3_DIRECTION,DIO_u8_PA2_DIRECTION,DIO_u8_PA1_DIRECTION,DIO_u8_PA0_DIRECTION);

DIO_u8_DDRB_REG = PRIVATE_u8_CONC(DIO_u8_PB7_DIRECTION,DIO_u8_PB6_DIRECTION,DIO_u8_PB5_DIRECTION,DIO_u8_PB4_DIRECTION,
    1712:	e7 e3       	ldi	r30, 0x37	; 55
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	10 82       	st	Z, r1
		                          DIO_u8_PB3_DIRECTION,DIO_u8_PB2_DIRECTION,DIO_u8_PB1_DIRECTION,DIO_u8_PB0_DIRECTION);

DIO_u8_DDRC_REG = PRIVATE_u8_CONC(DIO_u8_PC7_DIRECTION,DIO_u8_PC6_DIRECTION,DIO_u8_PC5_DIRECTION,DIO_u8_PC4_DIRECTION,
    1718:	e4 e3       	ldi	r30, 0x34	; 52
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	87 e0       	ldi	r24, 0x07	; 7
    171e:	80 83       	st	Z, r24
		                          DIO_u8_PC3_DIRECTION,DIO_u8_PC2_DIRECTION,DIO_u8_PC1_DIRECTION,DIO_u8_PC0_DIRECTION);

DIO_u8_DDRD_REG = PRIVATE_u8_CONC(DIO_u8_PD7_DIRECTION,DIO_u8_PD6_DIRECTION,DIO_u8_PD5_DIRECTION,DIO_u8_PD4_DIRECTION,
    1720:	e1 e3       	ldi	r30, 0x31	; 49
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	8f ef       	ldi	r24, 0xFF	; 255
    1726:	80 83       	st	Z, r24
		                          DIO_u8_PD3_DIRECTION,DIO_u8_PD2_DIRECTION,DIO_u8_PD1_DIRECTION,DIO_u8_PD0_DIRECTION);

/*Value PORT*/

DIO_u8_PORTA_REG = PRIVATE_u8_CONC(DIO_u8_PA7_VALUE,DIO_u8_PA6_VALUE,DIO_u8_PA5_VALUE,DIO_u8_PA4_VALUE,
    1728:	eb e3       	ldi	r30, 0x3B	; 59
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	8f ef       	ldi	r24, 0xFF	; 255
    172e:	80 83       	st	Z, r24
	                               DIO_u8_PA3_VALUE,DIO_u8_PA2_VALUE,DIO_u8_PA1_VALUE,DIO_u8_PA0_VALUE);

DIO_u8_PORTB_REG = PRIVATE_u8_CONC(DIO_u8_PB7_VALUE,DIO_u8_PB6_VALUE,DIO_u8_PB5_VALUE,DIO_u8_PB4_VALUE,
    1730:	e8 e3       	ldi	r30, 0x38	; 56
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	10 82       	st	Z, r1
								   DIO_u8_PB3_VALUE,DIO_u8_PB2_VALUE,DIO_u8_PB1_VALUE,DIO_u8_PB0_VALUE);

DIO_u8_PORTC_REG = PRIVATE_u8_CONC(DIO_u8_PC7_VALUE,DIO_u8_PC6_VALUE,DIO_u8_PC5_VALUE,DIO_u8_PC4_VALUE,
    1736:	e5 e3       	ldi	r30, 0x35	; 53
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	10 82       	st	Z, r1
	                                DIO_u8_PC3_VALUE,DIO_u8_PC2_VALUE,DIO_u8_PC1_VALUE,DIO_u8_PC0_VALUE);

DIO_u8_PORTD_REG = PRIVATE_u8_CONC(DIO_u8_PD7_VALUE,DIO_u8_PD6_VALUE,DIO_u8_PD5_VALUE,DIO_u8_PD4_VALUE,
    173c:	e2 e3       	ldi	r30, 0x32	; 50
    173e:	f0 e0       	ldi	r31, 0x00	; 0
    1740:	10 82       	st	Z, r1
		                          DIO_u8_PD3_VALUE,DIO_u8_PD2_VALUE,DIO_u8_PD1_VALUE,DIO_u8_PD0_VALUE);



}
    1742:	cf 91       	pop	r28
    1744:	df 91       	pop	r29
    1746:	08 95       	ret

00001748 <KPD_u8GetKeyValue>:
static u8 KPD_Au8ColsPorts[4] = {KPD_u8_C1_PORT,KPD_u8_C2_PORT,KPD_u8_C3_PORT,KPD_u8_C4_PORT};



u8 KPD_u8GetKeyValue(u8 *Copy_pu8ReturnedValue)
{
    1748:	df 93       	push	r29
    174a:	cf 93       	push	r28
    174c:	cd b7       	in	r28, 0x3d	; 61
    174e:	de b7       	in	r29, 0x3e	; 62
    1750:	65 97       	sbiw	r28, 0x15	; 21
    1752:	0f b6       	in	r0, 0x3f	; 63
    1754:	f8 94       	cli
    1756:	de bf       	out	0x3e, r29	; 62
    1758:	0f be       	out	0x3f, r0	; 63
    175a:	cd bf       	out	0x3d, r28	; 61
    175c:	9d 8b       	std	Y+21, r25	; 0x15
    175e:	8c 8b       	std	Y+20, r24	; 0x14
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	8a 8b       	std	Y+18, r24	; 0x12
	u8 Local_u8RowsCounter = 0, Local_u8ColsCounter, Local_u8PinValue, Local_u8Flag = 0;
    1764:	19 8a       	std	Y+17, r1	; 0x11
    1766:	1f 86       	std	Y+15, r1	; 0x0f
	if(Copy_pu8ReturnedValue != NULL)
    1768:	8c 89       	ldd	r24, Y+20	; 0x14
    176a:	9d 89       	ldd	r25, Y+21	; 0x15
    176c:	00 97       	sbiw	r24, 0x00	; 0
    176e:	09 f4       	brne	.+2      	; 0x1772 <KPD_u8GetKeyValue+0x2a>
    1770:	fc c0       	rjmp	.+504    	; 0x196a <KPD_u8GetKeyValue+0x222>
	{
		/* Initial Value */
		*Copy_pu8ReturnedValue = KPD_u8_KEY_NOT_PRESSED;
    1772:	ec 89       	ldd	r30, Y+20	; 0x14
    1774:	fd 89       	ldd	r31, Y+21	; 0x15
    1776:	8f ef       	ldi	r24, 0xFF	; 255
    1778:	80 83       	st	Z, r24
		/* Step 1 : Activate Rows */
		/* Create Loop to activate each row */
		for(Local_u8RowsCounter = 0; Local_u8RowsCounter < 4; Local_u8RowsCounter++)
    177a:	19 8a       	std	Y+17, r1	; 0x11
    177c:	f1 c0       	rjmp	.+482    	; 0x1960 <KPD_u8GetKeyValue+0x218>
		{
			DIO_u8SetPinValue(KPD_Au8RowsPorts[Local_u8RowsCounter],KPD_Au8RowsPins[Local_u8RowsCounter],DIO_u8_LOW);
    177e:	89 89       	ldd	r24, Y+17	; 0x11
    1780:	88 2f       	mov	r24, r24
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	fc 01       	movw	r30, r24
    1786:	e0 58       	subi	r30, 0x80	; 128
    1788:	ff 4f       	sbci	r31, 0xFF	; 255
    178a:	20 81       	ld	r18, Z
    178c:	89 89       	ldd	r24, Y+17	; 0x11
    178e:	88 2f       	mov	r24, r24
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	fc 01       	movw	r30, r24
    1794:	e8 58       	subi	r30, 0x88	; 136
    1796:	ff 4f       	sbci	r31, 0xFF	; 255
    1798:	90 81       	ld	r25, Z
    179a:	82 2f       	mov	r24, r18
    179c:	69 2f       	mov	r22, r25
    179e:	40 e0       	ldi	r20, 0x00	; 0
    17a0:	0e 94 d7 07 	call	0xfae	; 0xfae <DIO_u8SetPinValue>
			/* Step 2 : Check each column to get the pressed switch */
			for(Local_u8ColsCounter = 0;Local_u8ColsCounter < 4;Local_u8ColsCounter++)
    17a4:	18 8a       	std	Y+16, r1	; 0x10
    17a6:	bf c0       	rjmp	.+382    	; 0x1926 <KPD_u8GetKeyValue+0x1de>
			{
				/* Get Pin Value */
				DIO_u8GetPinValue(KPD_Au8ColsPorts[Local_u8ColsCounter],KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
    17a8:	88 89       	ldd	r24, Y+16	; 0x10
    17aa:	88 2f       	mov	r24, r24
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	fc 01       	movw	r30, r24
    17b0:	ec 57       	subi	r30, 0x7C	; 124
    17b2:	ff 4f       	sbci	r31, 0xFF	; 255
    17b4:	40 81       	ld	r20, Z
    17b6:	88 89       	ldd	r24, Y+16	; 0x10
    17b8:	88 2f       	mov	r24, r24
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	fc 01       	movw	r30, r24
    17be:	e4 58       	subi	r30, 0x84	; 132
    17c0:	ff 4f       	sbci	r31, 0xFF	; 255
    17c2:	90 81       	ld	r25, Z
    17c4:	9e 01       	movw	r18, r28
    17c6:	2d 5e       	subi	r18, 0xED	; 237
    17c8:	3f 4f       	sbci	r19, 0xFF	; 255
    17ca:	84 2f       	mov	r24, r20
    17cc:	69 2f       	mov	r22, r25
    17ce:	a9 01       	movw	r20, r18
    17d0:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_u8GetPinValue>
				/* Check pin value */
				if(Local_u8PinValue == DIO_u8_LOW) /* Switch is pressed */
    17d4:	8b 89       	ldd	r24, Y+19	; 0x13
    17d6:	88 23       	and	r24, r24
    17d8:	09 f0       	breq	.+2      	; 0x17dc <KPD_u8GetKeyValue+0x94>
    17da:	a2 c0       	rjmp	.+324    	; 0x1920 <KPD_u8GetKeyValue+0x1d8>
    17dc:	80 e0       	ldi	r24, 0x00	; 0
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	a0 ea       	ldi	r26, 0xA0	; 160
    17e2:	b1 e4       	ldi	r27, 0x41	; 65
    17e4:	8b 87       	std	Y+11, r24	; 0x0b
    17e6:	9c 87       	std	Y+12, r25	; 0x0c
    17e8:	ad 87       	std	Y+13, r26	; 0x0d
    17ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    17ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    17f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    17f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    17f4:	20 e0       	ldi	r18, 0x00	; 0
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	4a ef       	ldi	r20, 0xFA	; 250
    17fa:	54 e4       	ldi	r21, 0x44	; 68
    17fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1800:	dc 01       	movw	r26, r24
    1802:	cb 01       	movw	r24, r22
    1804:	8f 83       	std	Y+7, r24	; 0x07
    1806:	98 87       	std	Y+8, r25	; 0x08
    1808:	a9 87       	std	Y+9, r26	; 0x09
    180a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    180c:	6f 81       	ldd	r22, Y+7	; 0x07
    180e:	78 85       	ldd	r23, Y+8	; 0x08
    1810:	89 85       	ldd	r24, Y+9	; 0x09
    1812:	9a 85       	ldd	r25, Y+10	; 0x0a
    1814:	20 e0       	ldi	r18, 0x00	; 0
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	40 e8       	ldi	r20, 0x80	; 128
    181a:	5f e3       	ldi	r21, 0x3F	; 63
    181c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1820:	88 23       	and	r24, r24
    1822:	2c f4       	brge	.+10     	; 0x182e <KPD_u8GetKeyValue+0xe6>
		__ticks = 1;
    1824:	81 e0       	ldi	r24, 0x01	; 1
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	9e 83       	std	Y+6, r25	; 0x06
    182a:	8d 83       	std	Y+5, r24	; 0x05
    182c:	3f c0       	rjmp	.+126    	; 0x18ac <KPD_u8GetKeyValue+0x164>
	else if (__tmp > 65535)
    182e:	6f 81       	ldd	r22, Y+7	; 0x07
    1830:	78 85       	ldd	r23, Y+8	; 0x08
    1832:	89 85       	ldd	r24, Y+9	; 0x09
    1834:	9a 85       	ldd	r25, Y+10	; 0x0a
    1836:	20 e0       	ldi	r18, 0x00	; 0
    1838:	3f ef       	ldi	r19, 0xFF	; 255
    183a:	4f e7       	ldi	r20, 0x7F	; 127
    183c:	57 e4       	ldi	r21, 0x47	; 71
    183e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1842:	18 16       	cp	r1, r24
    1844:	4c f5       	brge	.+82     	; 0x1898 <KPD_u8GetKeyValue+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1846:	6b 85       	ldd	r22, Y+11	; 0x0b
    1848:	7c 85       	ldd	r23, Y+12	; 0x0c
    184a:	8d 85       	ldd	r24, Y+13	; 0x0d
    184c:	9e 85       	ldd	r25, Y+14	; 0x0e
    184e:	20 e0       	ldi	r18, 0x00	; 0
    1850:	30 e0       	ldi	r19, 0x00	; 0
    1852:	40 e2       	ldi	r20, 0x20	; 32
    1854:	51 e4       	ldi	r21, 0x41	; 65
    1856:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    185a:	dc 01       	movw	r26, r24
    185c:	cb 01       	movw	r24, r22
    185e:	bc 01       	movw	r22, r24
    1860:	cd 01       	movw	r24, r26
    1862:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1866:	dc 01       	movw	r26, r24
    1868:	cb 01       	movw	r24, r22
    186a:	9e 83       	std	Y+6, r25	; 0x06
    186c:	8d 83       	std	Y+5, r24	; 0x05
    186e:	0f c0       	rjmp	.+30     	; 0x188e <KPD_u8GetKeyValue+0x146>
    1870:	88 ec       	ldi	r24, 0xC8	; 200
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	9c 83       	std	Y+4, r25	; 0x04
    1876:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1878:	8b 81       	ldd	r24, Y+3	; 0x03
    187a:	9c 81       	ldd	r25, Y+4	; 0x04
    187c:	01 97       	sbiw	r24, 0x01	; 1
    187e:	f1 f7       	brne	.-4      	; 0x187c <KPD_u8GetKeyValue+0x134>
    1880:	9c 83       	std	Y+4, r25	; 0x04
    1882:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1884:	8d 81       	ldd	r24, Y+5	; 0x05
    1886:	9e 81       	ldd	r25, Y+6	; 0x06
    1888:	01 97       	sbiw	r24, 0x01	; 1
    188a:	9e 83       	std	Y+6, r25	; 0x06
    188c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    188e:	8d 81       	ldd	r24, Y+5	; 0x05
    1890:	9e 81       	ldd	r25, Y+6	; 0x06
    1892:	00 97       	sbiw	r24, 0x00	; 0
    1894:	69 f7       	brne	.-38     	; 0x1870 <KPD_u8GetKeyValue+0x128>
    1896:	14 c0       	rjmp	.+40     	; 0x18c0 <KPD_u8GetKeyValue+0x178>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1898:	6f 81       	ldd	r22, Y+7	; 0x07
    189a:	78 85       	ldd	r23, Y+8	; 0x08
    189c:	89 85       	ldd	r24, Y+9	; 0x09
    189e:	9a 85       	ldd	r25, Y+10	; 0x0a
    18a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18a4:	dc 01       	movw	r26, r24
    18a6:	cb 01       	movw	r24, r22
    18a8:	9e 83       	std	Y+6, r25	; 0x06
    18aa:	8d 83       	std	Y+5, r24	; 0x05
    18ac:	8d 81       	ldd	r24, Y+5	; 0x05
    18ae:	9e 81       	ldd	r25, Y+6	; 0x06
    18b0:	9a 83       	std	Y+2, r25	; 0x02
    18b2:	89 83       	std	Y+1, r24	; 0x01
    18b4:	89 81       	ldd	r24, Y+1	; 0x01
    18b6:	9a 81       	ldd	r25, Y+2	; 0x02
    18b8:	01 97       	sbiw	r24, 0x01	; 1
    18ba:	f1 f7       	brne	.-4      	; 0x18b8 <KPD_u8GetKeyValue+0x170>
    18bc:	9a 83       	std	Y+2, r25	; 0x02
    18be:	89 83       	std	Y+1, r24	; 0x01
				{
					/* Debouncing */
					_delay_ms(20);
					do
					{
						DIO_u8GetPinValue(KPD_Au8ColsPorts[Local_u8ColsCounter],KPD_Au8ColsPins[Local_u8ColsCounter],&Local_u8PinValue);
    18c0:	88 89       	ldd	r24, Y+16	; 0x10
    18c2:	88 2f       	mov	r24, r24
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	fc 01       	movw	r30, r24
    18c8:	ec 57       	subi	r30, 0x7C	; 124
    18ca:	ff 4f       	sbci	r31, 0xFF	; 255
    18cc:	40 81       	ld	r20, Z
    18ce:	88 89       	ldd	r24, Y+16	; 0x10
    18d0:	88 2f       	mov	r24, r24
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	fc 01       	movw	r30, r24
    18d6:	e4 58       	subi	r30, 0x84	; 132
    18d8:	ff 4f       	sbci	r31, 0xFF	; 255
    18da:	90 81       	ld	r25, Z
    18dc:	9e 01       	movw	r18, r28
    18de:	2d 5e       	subi	r18, 0xED	; 237
    18e0:	3f 4f       	sbci	r19, 0xFF	; 255
    18e2:	84 2f       	mov	r24, r20
    18e4:	69 2f       	mov	r22, r25
    18e6:	a9 01       	movw	r20, r18
    18e8:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_u8GetPinValue>
					}
					while(Local_u8PinValue == DIO_u8_LOW);
    18ec:	8b 89       	ldd	r24, Y+19	; 0x13
    18ee:	88 23       	and	r24, r24
    18f0:	39 f3       	breq	.-50     	; 0x18c0 <KPD_u8GetKeyValue+0x178>
					/* return the result */
					*Copy_pu8ReturnedValue = KPD_Au8Keys[Local_u8RowsCounter][Local_u8ColsCounter];
    18f2:	89 89       	ldd	r24, Y+17	; 0x11
    18f4:	48 2f       	mov	r20, r24
    18f6:	50 e0       	ldi	r21, 0x00	; 0
    18f8:	88 89       	ldd	r24, Y+16	; 0x10
    18fa:	28 2f       	mov	r18, r24
    18fc:	30 e0       	ldi	r19, 0x00	; 0
    18fe:	ca 01       	movw	r24, r20
    1900:	88 0f       	add	r24, r24
    1902:	99 1f       	adc	r25, r25
    1904:	88 0f       	add	r24, r24
    1906:	99 1f       	adc	r25, r25
    1908:	82 0f       	add	r24, r18
    190a:	93 1f       	adc	r25, r19
    190c:	fc 01       	movw	r30, r24
    190e:	e8 59       	subi	r30, 0x98	; 152
    1910:	ff 4f       	sbci	r31, 0xFF	; 255
    1912:	80 81       	ld	r24, Z
    1914:	ec 89       	ldd	r30, Y+20	; 0x14
    1916:	fd 89       	ldd	r31, Y+21	; 0x15
    1918:	80 83       	st	Z, r24
					/* Update flag to terminate outer loop */
					Local_u8Flag = 1;
    191a:	81 e0       	ldi	r24, 0x01	; 1
    191c:	8f 87       	std	Y+15, r24	; 0x0f
    191e:	07 c0       	rjmp	.+14     	; 0x192e <KPD_u8GetKeyValue+0x1e6>
		/* Create Loop to activate each row */
		for(Local_u8RowsCounter = 0; Local_u8RowsCounter < 4; Local_u8RowsCounter++)
		{
			DIO_u8SetPinValue(KPD_Au8RowsPorts[Local_u8RowsCounter],KPD_Au8RowsPins[Local_u8RowsCounter],DIO_u8_LOW);
			/* Step 2 : Check each column to get the pressed switch */
			for(Local_u8ColsCounter = 0;Local_u8ColsCounter < 4;Local_u8ColsCounter++)
    1920:	88 89       	ldd	r24, Y+16	; 0x10
    1922:	8f 5f       	subi	r24, 0xFF	; 255
    1924:	88 8b       	std	Y+16, r24	; 0x10
    1926:	88 89       	ldd	r24, Y+16	; 0x10
    1928:	84 30       	cpi	r24, 0x04	; 4
    192a:	08 f4       	brcc	.+2      	; 0x192e <KPD_u8GetKeyValue+0x1e6>
    192c:	3d cf       	rjmp	.-390    	; 0x17a8 <KPD_u8GetKeyValue+0x60>
					/* Terminate Loop */
					break;
				}
			}
		/* Deactivate Row*/
		DIO_u8SetPinValue(KPD_Au8RowsPorts[Local_u8RowsCounter],KPD_Au8RowsPins[Local_u8RowsCounter],DIO_u8_HIGH);
    192e:	89 89       	ldd	r24, Y+17	; 0x11
    1930:	88 2f       	mov	r24, r24
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	fc 01       	movw	r30, r24
    1936:	e0 58       	subi	r30, 0x80	; 128
    1938:	ff 4f       	sbci	r31, 0xFF	; 255
    193a:	20 81       	ld	r18, Z
    193c:	89 89       	ldd	r24, Y+17	; 0x11
    193e:	88 2f       	mov	r24, r24
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	fc 01       	movw	r30, r24
    1944:	e8 58       	subi	r30, 0x88	; 136
    1946:	ff 4f       	sbci	r31, 0xFF	; 255
    1948:	90 81       	ld	r25, Z
    194a:	82 2f       	mov	r24, r18
    194c:	69 2f       	mov	r22, r25
    194e:	41 e0       	ldi	r20, 0x01	; 1
    1950:	0e 94 d7 07 	call	0xfae	; 0xfae <DIO_u8SetPinValue>
		if (Local_u8Flag == 1)
    1954:	8f 85       	ldd	r24, Y+15	; 0x0f
    1956:	81 30       	cpi	r24, 0x01	; 1
    1958:	49 f0       	breq	.+18     	; 0x196c <KPD_u8GetKeyValue+0x224>
	{
		/* Initial Value */
		*Copy_pu8ReturnedValue = KPD_u8_KEY_NOT_PRESSED;
		/* Step 1 : Activate Rows */
		/* Create Loop to activate each row */
		for(Local_u8RowsCounter = 0; Local_u8RowsCounter < 4; Local_u8RowsCounter++)
    195a:	89 89       	ldd	r24, Y+17	; 0x11
    195c:	8f 5f       	subi	r24, 0xFF	; 255
    195e:	89 8b       	std	Y+17, r24	; 0x11
    1960:	89 89       	ldd	r24, Y+17	; 0x11
    1962:	84 30       	cpi	r24, 0x04	; 4
    1964:	08 f4       	brcc	.+2      	; 0x1968 <KPD_u8GetKeyValue+0x220>
    1966:	0b cf       	rjmp	.-490    	; 0x177e <KPD_u8GetKeyValue+0x36>
    1968:	01 c0       	rjmp	.+2      	; 0x196c <KPD_u8GetKeyValue+0x224>
		}
		}
	}
	else
	{
		Local_u8ErrorState = STD_TYPES_NOK;
    196a:	1a 8a       	std	Y+18, r1	; 0x12
	}

	return Local_u8ErrorState;
    196c:	8a 89       	ldd	r24, Y+18	; 0x12
}
    196e:	65 96       	adiw	r28, 0x15	; 21
    1970:	0f b6       	in	r0, 0x3f	; 63
    1972:	f8 94       	cli
    1974:	de bf       	out	0x3e, r29	; 62
    1976:	0f be       	out	0x3f, r0	; 63
    1978:	cd bf       	out	0x3d, r28	; 61
    197a:	cf 91       	pop	r28
    197c:	df 91       	pop	r29
    197e:	08 95       	ret

00001980 <LCD_voidWriteChar>:
#include "LCD_interface.h"
#include "LCD_private.h"
#include "LCD_config.h"

void LCD_voidWriteChar(u8 Copy_u8Char)
{
    1980:	df 93       	push	r29
    1982:	cf 93       	push	r28
    1984:	cd b7       	in	r28, 0x3d	; 61
    1986:	de b7       	in	r29, 0x3e	; 62
    1988:	69 97       	sbiw	r28, 0x19	; 25
    198a:	0f b6       	in	r0, 0x3f	; 63
    198c:	f8 94       	cli
    198e:	de bf       	out	0x3e, r29	; 62
    1990:	0f be       	out	0x3f, r0	; 63
    1992:	cd bf       	out	0x3d, r28	; 61
    1994:	89 8f       	std	Y+25, r24	; 0x19
	/* RS = 1 (Data Byte) 		*/
	DIO_u8SetPinValue(LCD_u8_RS_PORT,LCD_u8_RS_PIN,DIO_u8_HIGH);
    1996:	82 e0       	ldi	r24, 0x02	; 2
    1998:	60 e0       	ldi	r22, 0x00	; 0
    199a:	41 e0       	ldi	r20, 0x01	; 1
    199c:	0e 94 d7 07 	call	0xfae	; 0xfae <DIO_u8SetPinValue>
	/* RW = 0 (Write Operation) */
	DIO_u8SetPinValue(LCD_u8_RW_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    19a0:	82 e0       	ldi	r24, 0x02	; 2
    19a2:	61 e0       	ldi	r22, 0x01	; 1
    19a4:	40 e0       	ldi	r20, 0x00	; 0
    19a6:	0e 94 d7 07 	call	0xfae	; 0xfae <DIO_u8SetPinValue>
	/* Send Data Byte to LCD 	*/
	DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8Char);
    19aa:	83 e0       	ldi	r24, 0x03	; 3
    19ac:	69 8d       	ldd	r22, Y+25	; 0x19
    19ae:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <DIO_u8SetPortValue>
	/* Enable Pulse				*/
	DIO_u8SetPinValue(LCD_u8_EN_PORT,LCD_u8_EN_PIN,DIO_u8_HIGH);
    19b2:	82 e0       	ldi	r24, 0x02	; 2
    19b4:	62 e0       	ldi	r22, 0x02	; 2
    19b6:	41 e0       	ldi	r20, 0x01	; 1
    19b8:	0e 94 d7 07 	call	0xfae	; 0xfae <DIO_u8SetPinValue>
    19bc:	80 e0       	ldi	r24, 0x00	; 0
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	a0 e8       	ldi	r26, 0x80	; 128
    19c2:	bf e3       	ldi	r27, 0x3F	; 63
    19c4:	8d 8b       	std	Y+21, r24	; 0x15
    19c6:	9e 8b       	std	Y+22, r25	; 0x16
    19c8:	af 8b       	std	Y+23, r26	; 0x17
    19ca:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    19cc:	6d 89       	ldd	r22, Y+21	; 0x15
    19ce:	7e 89       	ldd	r23, Y+22	; 0x16
    19d0:	8f 89       	ldd	r24, Y+23	; 0x17
    19d2:	98 8d       	ldd	r25, Y+24	; 0x18
    19d4:	2b ea       	ldi	r18, 0xAB	; 171
    19d6:	3a ea       	ldi	r19, 0xAA	; 170
    19d8:	4a e2       	ldi	r20, 0x2A	; 42
    19da:	50 e4       	ldi	r21, 0x40	; 64
    19dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19e0:	dc 01       	movw	r26, r24
    19e2:	cb 01       	movw	r24, r22
    19e4:	89 8b       	std	Y+17, r24	; 0x11
    19e6:	9a 8b       	std	Y+18, r25	; 0x12
    19e8:	ab 8b       	std	Y+19, r26	; 0x13
    19ea:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    19ec:	69 89       	ldd	r22, Y+17	; 0x11
    19ee:	7a 89       	ldd	r23, Y+18	; 0x12
    19f0:	8b 89       	ldd	r24, Y+19	; 0x13
    19f2:	9c 89       	ldd	r25, Y+20	; 0x14
    19f4:	20 e0       	ldi	r18, 0x00	; 0
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	40 e8       	ldi	r20, 0x80	; 128
    19fa:	5f e3       	ldi	r21, 0x3F	; 63
    19fc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a00:	88 23       	and	r24, r24
    1a02:	1c f4       	brge	.+6      	; 0x1a0a <LCD_voidWriteChar+0x8a>
		__ticks = 1;
    1a04:	81 e0       	ldi	r24, 0x01	; 1
    1a06:	88 8b       	std	Y+16, r24	; 0x10
    1a08:	91 c0       	rjmp	.+290    	; 0x1b2c <LCD_voidWriteChar+0x1ac>
	else if (__tmp > 255)
    1a0a:	69 89       	ldd	r22, Y+17	; 0x11
    1a0c:	7a 89       	ldd	r23, Y+18	; 0x12
    1a0e:	8b 89       	ldd	r24, Y+19	; 0x13
    1a10:	9c 89       	ldd	r25, Y+20	; 0x14
    1a12:	20 e0       	ldi	r18, 0x00	; 0
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	4f e7       	ldi	r20, 0x7F	; 127
    1a18:	53 e4       	ldi	r21, 0x43	; 67
    1a1a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a1e:	18 16       	cp	r1, r24
    1a20:	0c f0       	brlt	.+2      	; 0x1a24 <LCD_voidWriteChar+0xa4>
    1a22:	7b c0       	rjmp	.+246    	; 0x1b1a <LCD_voidWriteChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    1a24:	6d 89       	ldd	r22, Y+21	; 0x15
    1a26:	7e 89       	ldd	r23, Y+22	; 0x16
    1a28:	8f 89       	ldd	r24, Y+23	; 0x17
    1a2a:	98 8d       	ldd	r25, Y+24	; 0x18
    1a2c:	20 e0       	ldi	r18, 0x00	; 0
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	4a e7       	ldi	r20, 0x7A	; 122
    1a32:	54 e4       	ldi	r21, 0x44	; 68
    1a34:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1a38:	dc 01       	movw	r26, r24
    1a3a:	cb 01       	movw	r24, r22
    1a3c:	8c 87       	std	Y+12, r24	; 0x0c
    1a3e:	9d 87       	std	Y+13, r25	; 0x0d
    1a40:	ae 87       	std	Y+14, r26	; 0x0e
    1a42:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a44:	6c 85       	ldd	r22, Y+12	; 0x0c
    1a46:	7d 85       	ldd	r23, Y+13	; 0x0d
    1a48:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a4a:	9f 85       	ldd	r25, Y+15	; 0x0f
    1a4c:	20 e0       	ldi	r18, 0x00	; 0
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	4a ef       	ldi	r20, 0xFA	; 250
    1a52:	54 e4       	ldi	r21, 0x44	; 68
    1a54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a58:	dc 01       	movw	r26, r24
    1a5a:	cb 01       	movw	r24, r22
    1a5c:	88 87       	std	Y+8, r24	; 0x08
    1a5e:	99 87       	std	Y+9, r25	; 0x09
    1a60:	aa 87       	std	Y+10, r26	; 0x0a
    1a62:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1a64:	68 85       	ldd	r22, Y+8	; 0x08
    1a66:	79 85       	ldd	r23, Y+9	; 0x09
    1a68:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a6a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a6c:	20 e0       	ldi	r18, 0x00	; 0
    1a6e:	30 e0       	ldi	r19, 0x00	; 0
    1a70:	40 e8       	ldi	r20, 0x80	; 128
    1a72:	5f e3       	ldi	r21, 0x3F	; 63
    1a74:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a78:	88 23       	and	r24, r24
    1a7a:	2c f4       	brge	.+10     	; 0x1a86 <LCD_voidWriteChar+0x106>
		__ticks = 1;
    1a7c:	81 e0       	ldi	r24, 0x01	; 1
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	9f 83       	std	Y+7, r25	; 0x07
    1a82:	8e 83       	std	Y+6, r24	; 0x06
    1a84:	3f c0       	rjmp	.+126    	; 0x1b04 <LCD_voidWriteChar+0x184>
	else if (__tmp > 65535)
    1a86:	68 85       	ldd	r22, Y+8	; 0x08
    1a88:	79 85       	ldd	r23, Y+9	; 0x09
    1a8a:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a8c:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a8e:	20 e0       	ldi	r18, 0x00	; 0
    1a90:	3f ef       	ldi	r19, 0xFF	; 255
    1a92:	4f e7       	ldi	r20, 0x7F	; 127
    1a94:	57 e4       	ldi	r21, 0x47	; 71
    1a96:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a9a:	18 16       	cp	r1, r24
    1a9c:	4c f5       	brge	.+82     	; 0x1af0 <LCD_voidWriteChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a9e:	6c 85       	ldd	r22, Y+12	; 0x0c
    1aa0:	7d 85       	ldd	r23, Y+13	; 0x0d
    1aa2:	8e 85       	ldd	r24, Y+14	; 0x0e
    1aa4:	9f 85       	ldd	r25, Y+15	; 0x0f
    1aa6:	20 e0       	ldi	r18, 0x00	; 0
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	40 e2       	ldi	r20, 0x20	; 32
    1aac:	51 e4       	ldi	r21, 0x41	; 65
    1aae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ab2:	dc 01       	movw	r26, r24
    1ab4:	cb 01       	movw	r24, r22
    1ab6:	bc 01       	movw	r22, r24
    1ab8:	cd 01       	movw	r24, r26
    1aba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1abe:	dc 01       	movw	r26, r24
    1ac0:	cb 01       	movw	r24, r22
    1ac2:	9f 83       	std	Y+7, r25	; 0x07
    1ac4:	8e 83       	std	Y+6, r24	; 0x06
    1ac6:	0f c0       	rjmp	.+30     	; 0x1ae6 <LCD_voidWriteChar+0x166>
    1ac8:	88 ec       	ldi	r24, 0xC8	; 200
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	9d 83       	std	Y+5, r25	; 0x05
    1ace:	8c 83       	std	Y+4, r24	; 0x04
    1ad0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ad2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ad4:	01 97       	sbiw	r24, 0x01	; 1
    1ad6:	f1 f7       	brne	.-4      	; 0x1ad4 <LCD_voidWriteChar+0x154>
    1ad8:	9d 83       	std	Y+5, r25	; 0x05
    1ada:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1adc:	8e 81       	ldd	r24, Y+6	; 0x06
    1ade:	9f 81       	ldd	r25, Y+7	; 0x07
    1ae0:	01 97       	sbiw	r24, 0x01	; 1
    1ae2:	9f 83       	std	Y+7, r25	; 0x07
    1ae4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ae6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ae8:	9f 81       	ldd	r25, Y+7	; 0x07
    1aea:	00 97       	sbiw	r24, 0x00	; 0
    1aec:	69 f7       	brne	.-38     	; 0x1ac8 <LCD_voidWriteChar+0x148>
    1aee:	24 c0       	rjmp	.+72     	; 0x1b38 <LCD_voidWriteChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1af0:	68 85       	ldd	r22, Y+8	; 0x08
    1af2:	79 85       	ldd	r23, Y+9	; 0x09
    1af4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1af6:	9b 85       	ldd	r25, Y+11	; 0x0b
    1af8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1afc:	dc 01       	movw	r26, r24
    1afe:	cb 01       	movw	r24, r22
    1b00:	9f 83       	std	Y+7, r25	; 0x07
    1b02:	8e 83       	std	Y+6, r24	; 0x06
    1b04:	8e 81       	ldd	r24, Y+6	; 0x06
    1b06:	9f 81       	ldd	r25, Y+7	; 0x07
    1b08:	9b 83       	std	Y+3, r25	; 0x03
    1b0a:	8a 83       	std	Y+2, r24	; 0x02
    1b0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0e:	9b 81       	ldd	r25, Y+3	; 0x03
    1b10:	01 97       	sbiw	r24, 0x01	; 1
    1b12:	f1 f7       	brne	.-4      	; 0x1b10 <LCD_voidWriteChar+0x190>
    1b14:	9b 83       	std	Y+3, r25	; 0x03
    1b16:	8a 83       	std	Y+2, r24	; 0x02
    1b18:	0f c0       	rjmp	.+30     	; 0x1b38 <LCD_voidWriteChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1b1a:	69 89       	ldd	r22, Y+17	; 0x11
    1b1c:	7a 89       	ldd	r23, Y+18	; 0x12
    1b1e:	8b 89       	ldd	r24, Y+19	; 0x13
    1b20:	9c 89       	ldd	r25, Y+20	; 0x14
    1b22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b26:	dc 01       	movw	r26, r24
    1b28:	cb 01       	movw	r24, r22
    1b2a:	88 8b       	std	Y+16, r24	; 0x10
    1b2c:	88 89       	ldd	r24, Y+16	; 0x10
    1b2e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1b30:	89 81       	ldd	r24, Y+1	; 0x01
    1b32:	8a 95       	dec	r24
    1b34:	f1 f7       	brne	.-4      	; 0x1b32 <LCD_voidWriteChar+0x1b2>
    1b36:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	DIO_u8SetPinValue(LCD_u8_EN_PORT,LCD_u8_EN_PIN,DIO_u8_LOW);
    1b38:	82 e0       	ldi	r24, 0x02	; 2
    1b3a:	62 e0       	ldi	r22, 0x02	; 2
    1b3c:	40 e0       	ldi	r20, 0x00	; 0
    1b3e:	0e 94 d7 07 	call	0xfae	; 0xfae <DIO_u8SetPinValue>
}
    1b42:	69 96       	adiw	r28, 0x19	; 25
    1b44:	0f b6       	in	r0, 0x3f	; 63
    1b46:	f8 94       	cli
    1b48:	de bf       	out	0x3e, r29	; 62
    1b4a:	0f be       	out	0x3f, r0	; 63
    1b4c:	cd bf       	out	0x3d, r28	; 61
    1b4e:	cf 91       	pop	r28
    1b50:	df 91       	pop	r29
    1b52:	08 95       	ret

00001b54 <LCD_voidWriteCmnd>:

void LCD_voidWriteCmnd (u8 Copy_u8Cmnd)
{
    1b54:	df 93       	push	r29
    1b56:	cf 93       	push	r28
    1b58:	cd b7       	in	r28, 0x3d	; 61
    1b5a:	de b7       	in	r29, 0x3e	; 62
    1b5c:	69 97       	sbiw	r28, 0x19	; 25
    1b5e:	0f b6       	in	r0, 0x3f	; 63
    1b60:	f8 94       	cli
    1b62:	de bf       	out	0x3e, r29	; 62
    1b64:	0f be       	out	0x3f, r0	; 63
    1b66:	cd bf       	out	0x3d, r28	; 61
    1b68:	89 8f       	std	Y+25, r24	; 0x19
	/* RS = 0 (Command Byte) 		*/
	DIO_u8SetPinValue(LCD_u8_RS_PORT,LCD_u8_RS_PIN,DIO_u8_LOW);
    1b6a:	82 e0       	ldi	r24, 0x02	; 2
    1b6c:	60 e0       	ldi	r22, 0x00	; 0
    1b6e:	40 e0       	ldi	r20, 0x00	; 0
    1b70:	0e 94 d7 07 	call	0xfae	; 0xfae <DIO_u8SetPinValue>
	/* RW = 0 (Write Operation) */
	DIO_u8SetPinValue(LCD_u8_RW_PORT,LCD_u8_RW_PIN,DIO_u8_LOW);
    1b74:	82 e0       	ldi	r24, 0x02	; 2
    1b76:	61 e0       	ldi	r22, 0x01	; 1
    1b78:	40 e0       	ldi	r20, 0x00	; 0
    1b7a:	0e 94 d7 07 	call	0xfae	; 0xfae <DIO_u8SetPinValue>
	/* Send Data Byte to LCD 	*/
	DIO_u8SetPortValue(LCD_u8_DATA_PORT,Copy_u8Cmnd);
    1b7e:	83 e0       	ldi	r24, 0x03	; 3
    1b80:	69 8d       	ldd	r22, Y+25	; 0x19
    1b82:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <DIO_u8SetPortValue>
	/* Enable Pulse				*/
	DIO_u8SetPinValue(LCD_u8_EN_PORT,LCD_u8_EN_PIN,DIO_u8_HIGH);
    1b86:	82 e0       	ldi	r24, 0x02	; 2
    1b88:	62 e0       	ldi	r22, 0x02	; 2
    1b8a:	41 e0       	ldi	r20, 0x01	; 1
    1b8c:	0e 94 d7 07 	call	0xfae	; 0xfae <DIO_u8SetPinValue>
    1b90:	80 e0       	ldi	r24, 0x00	; 0
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	a0 e8       	ldi	r26, 0x80	; 128
    1b96:	bf e3       	ldi	r27, 0x3F	; 63
    1b98:	8d 8b       	std	Y+21, r24	; 0x15
    1b9a:	9e 8b       	std	Y+22, r25	; 0x16
    1b9c:	af 8b       	std	Y+23, r26	; 0x17
    1b9e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1ba0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ba2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ba4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ba6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ba8:	2b ea       	ldi	r18, 0xAB	; 171
    1baa:	3a ea       	ldi	r19, 0xAA	; 170
    1bac:	4a e2       	ldi	r20, 0x2A	; 42
    1bae:	50 e4       	ldi	r21, 0x40	; 64
    1bb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bb4:	dc 01       	movw	r26, r24
    1bb6:	cb 01       	movw	r24, r22
    1bb8:	89 8b       	std	Y+17, r24	; 0x11
    1bba:	9a 8b       	std	Y+18, r25	; 0x12
    1bbc:	ab 8b       	std	Y+19, r26	; 0x13
    1bbe:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1bc0:	69 89       	ldd	r22, Y+17	; 0x11
    1bc2:	7a 89       	ldd	r23, Y+18	; 0x12
    1bc4:	8b 89       	ldd	r24, Y+19	; 0x13
    1bc6:	9c 89       	ldd	r25, Y+20	; 0x14
    1bc8:	20 e0       	ldi	r18, 0x00	; 0
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	40 e8       	ldi	r20, 0x80	; 128
    1bce:	5f e3       	ldi	r21, 0x3F	; 63
    1bd0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bd4:	88 23       	and	r24, r24
    1bd6:	1c f4       	brge	.+6      	; 0x1bde <LCD_voidWriteCmnd+0x8a>
		__ticks = 1;
    1bd8:	81 e0       	ldi	r24, 0x01	; 1
    1bda:	88 8b       	std	Y+16, r24	; 0x10
    1bdc:	91 c0       	rjmp	.+290    	; 0x1d00 <LCD_voidWriteCmnd+0x1ac>
	else if (__tmp > 255)
    1bde:	69 89       	ldd	r22, Y+17	; 0x11
    1be0:	7a 89       	ldd	r23, Y+18	; 0x12
    1be2:	8b 89       	ldd	r24, Y+19	; 0x13
    1be4:	9c 89       	ldd	r25, Y+20	; 0x14
    1be6:	20 e0       	ldi	r18, 0x00	; 0
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	4f e7       	ldi	r20, 0x7F	; 127
    1bec:	53 e4       	ldi	r21, 0x43	; 67
    1bee:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bf2:	18 16       	cp	r1, r24
    1bf4:	0c f0       	brlt	.+2      	; 0x1bf8 <LCD_voidWriteCmnd+0xa4>
    1bf6:	7b c0       	rjmp	.+246    	; 0x1cee <LCD_voidWriteCmnd+0x19a>
	{
		_delay_ms(__us / 1000.0);
    1bf8:	6d 89       	ldd	r22, Y+21	; 0x15
    1bfa:	7e 89       	ldd	r23, Y+22	; 0x16
    1bfc:	8f 89       	ldd	r24, Y+23	; 0x17
    1bfe:	98 8d       	ldd	r25, Y+24	; 0x18
    1c00:	20 e0       	ldi	r18, 0x00	; 0
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	4a e7       	ldi	r20, 0x7A	; 122
    1c06:	54 e4       	ldi	r21, 0x44	; 68
    1c08:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1c0c:	dc 01       	movw	r26, r24
    1c0e:	cb 01       	movw	r24, r22
    1c10:	8c 87       	std	Y+12, r24	; 0x0c
    1c12:	9d 87       	std	Y+13, r25	; 0x0d
    1c14:	ae 87       	std	Y+14, r26	; 0x0e
    1c16:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c18:	6c 85       	ldd	r22, Y+12	; 0x0c
    1c1a:	7d 85       	ldd	r23, Y+13	; 0x0d
    1c1c:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c1e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c20:	20 e0       	ldi	r18, 0x00	; 0
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	4a ef       	ldi	r20, 0xFA	; 250
    1c26:	54 e4       	ldi	r21, 0x44	; 68
    1c28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c2c:	dc 01       	movw	r26, r24
    1c2e:	cb 01       	movw	r24, r22
    1c30:	88 87       	std	Y+8, r24	; 0x08
    1c32:	99 87       	std	Y+9, r25	; 0x09
    1c34:	aa 87       	std	Y+10, r26	; 0x0a
    1c36:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1c38:	68 85       	ldd	r22, Y+8	; 0x08
    1c3a:	79 85       	ldd	r23, Y+9	; 0x09
    1c3c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c3e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c40:	20 e0       	ldi	r18, 0x00	; 0
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	40 e8       	ldi	r20, 0x80	; 128
    1c46:	5f e3       	ldi	r21, 0x3F	; 63
    1c48:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c4c:	88 23       	and	r24, r24
    1c4e:	2c f4       	brge	.+10     	; 0x1c5a <LCD_voidWriteCmnd+0x106>
		__ticks = 1;
    1c50:	81 e0       	ldi	r24, 0x01	; 1
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	9f 83       	std	Y+7, r25	; 0x07
    1c56:	8e 83       	std	Y+6, r24	; 0x06
    1c58:	3f c0       	rjmp	.+126    	; 0x1cd8 <LCD_voidWriteCmnd+0x184>
	else if (__tmp > 65535)
    1c5a:	68 85       	ldd	r22, Y+8	; 0x08
    1c5c:	79 85       	ldd	r23, Y+9	; 0x09
    1c5e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1c60:	9b 85       	ldd	r25, Y+11	; 0x0b
    1c62:	20 e0       	ldi	r18, 0x00	; 0
    1c64:	3f ef       	ldi	r19, 0xFF	; 255
    1c66:	4f e7       	ldi	r20, 0x7F	; 127
    1c68:	57 e4       	ldi	r21, 0x47	; 71
    1c6a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c6e:	18 16       	cp	r1, r24
    1c70:	4c f5       	brge	.+82     	; 0x1cc4 <LCD_voidWriteCmnd+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c72:	6c 85       	ldd	r22, Y+12	; 0x0c
    1c74:	7d 85       	ldd	r23, Y+13	; 0x0d
    1c76:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c78:	9f 85       	ldd	r25, Y+15	; 0x0f
    1c7a:	20 e0       	ldi	r18, 0x00	; 0
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	40 e2       	ldi	r20, 0x20	; 32
    1c80:	51 e4       	ldi	r21, 0x41	; 65
    1c82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c86:	dc 01       	movw	r26, r24
    1c88:	cb 01       	movw	r24, r22
    1c8a:	bc 01       	movw	r22, r24
    1c8c:	cd 01       	movw	r24, r26
    1c8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c92:	dc 01       	movw	r26, r24
    1c94:	cb 01       	movw	r24, r22
    1c96:	9f 83       	std	Y+7, r25	; 0x07
    1c98:	8e 83       	std	Y+6, r24	; 0x06
    1c9a:	0f c0       	rjmp	.+30     	; 0x1cba <LCD_voidWriteCmnd+0x166>
    1c9c:	88 ec       	ldi	r24, 0xC8	; 200
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	9d 83       	std	Y+5, r25	; 0x05
    1ca2:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1ca4:	8c 81       	ldd	r24, Y+4	; 0x04
    1ca6:	9d 81       	ldd	r25, Y+5	; 0x05
    1ca8:	01 97       	sbiw	r24, 0x01	; 1
    1caa:	f1 f7       	brne	.-4      	; 0x1ca8 <LCD_voidWriteCmnd+0x154>
    1cac:	9d 83       	std	Y+5, r25	; 0x05
    1cae:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cb0:	8e 81       	ldd	r24, Y+6	; 0x06
    1cb2:	9f 81       	ldd	r25, Y+7	; 0x07
    1cb4:	01 97       	sbiw	r24, 0x01	; 1
    1cb6:	9f 83       	std	Y+7, r25	; 0x07
    1cb8:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cba:	8e 81       	ldd	r24, Y+6	; 0x06
    1cbc:	9f 81       	ldd	r25, Y+7	; 0x07
    1cbe:	00 97       	sbiw	r24, 0x00	; 0
    1cc0:	69 f7       	brne	.-38     	; 0x1c9c <LCD_voidWriteCmnd+0x148>
    1cc2:	24 c0       	rjmp	.+72     	; 0x1d0c <LCD_voidWriteCmnd+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cc4:	68 85       	ldd	r22, Y+8	; 0x08
    1cc6:	79 85       	ldd	r23, Y+9	; 0x09
    1cc8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1cca:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ccc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd0:	dc 01       	movw	r26, r24
    1cd2:	cb 01       	movw	r24, r22
    1cd4:	9f 83       	std	Y+7, r25	; 0x07
    1cd6:	8e 83       	std	Y+6, r24	; 0x06
    1cd8:	8e 81       	ldd	r24, Y+6	; 0x06
    1cda:	9f 81       	ldd	r25, Y+7	; 0x07
    1cdc:	9b 83       	std	Y+3, r25	; 0x03
    1cde:	8a 83       	std	Y+2, r24	; 0x02
    1ce0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ce4:	01 97       	sbiw	r24, 0x01	; 1
    1ce6:	f1 f7       	brne	.-4      	; 0x1ce4 <LCD_voidWriteCmnd+0x190>
    1ce8:	9b 83       	std	Y+3, r25	; 0x03
    1cea:	8a 83       	std	Y+2, r24	; 0x02
    1cec:	0f c0       	rjmp	.+30     	; 0x1d0c <LCD_voidWriteCmnd+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1cee:	69 89       	ldd	r22, Y+17	; 0x11
    1cf0:	7a 89       	ldd	r23, Y+18	; 0x12
    1cf2:	8b 89       	ldd	r24, Y+19	; 0x13
    1cf4:	9c 89       	ldd	r25, Y+20	; 0x14
    1cf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cfa:	dc 01       	movw	r26, r24
    1cfc:	cb 01       	movw	r24, r22
    1cfe:	88 8b       	std	Y+16, r24	; 0x10
    1d00:	88 89       	ldd	r24, Y+16	; 0x10
    1d02:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1d04:	89 81       	ldd	r24, Y+1	; 0x01
    1d06:	8a 95       	dec	r24
    1d08:	f1 f7       	brne	.-4      	; 0x1d06 <LCD_voidWriteCmnd+0x1b2>
    1d0a:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
	DIO_u8SetPinValue(LCD_u8_EN_PORT,LCD_u8_EN_PIN,DIO_u8_LOW);
    1d0c:	82 e0       	ldi	r24, 0x02	; 2
    1d0e:	62 e0       	ldi	r22, 0x02	; 2
    1d10:	40 e0       	ldi	r20, 0x00	; 0
    1d12:	0e 94 d7 07 	call	0xfae	; 0xfae <DIO_u8SetPinValue>
}
    1d16:	69 96       	adiw	r28, 0x19	; 25
    1d18:	0f b6       	in	r0, 0x3f	; 63
    1d1a:	f8 94       	cli
    1d1c:	de bf       	out	0x3e, r29	; 62
    1d1e:	0f be       	out	0x3f, r0	; 63
    1d20:	cd bf       	out	0x3d, r28	; 61
    1d22:	cf 91       	pop	r28
    1d24:	df 91       	pop	r29
    1d26:	08 95       	ret

00001d28 <LCD_voidInit>:

void LCD_voidInit(void)
{
    1d28:	0f 93       	push	r16
    1d2a:	1f 93       	push	r17
    1d2c:	df 93       	push	r29
    1d2e:	cf 93       	push	r28
    1d30:	cd b7       	in	r28, 0x3d	; 61
    1d32:	de b7       	in	r29, 0x3e	; 62
    1d34:	cc 54       	subi	r28, 0x4C	; 76
    1d36:	d0 40       	sbci	r29, 0x00	; 0
    1d38:	0f b6       	in	r0, 0x3f	; 63
    1d3a:	f8 94       	cli
    1d3c:	de bf       	out	0x3e, r29	; 62
    1d3e:	0f be       	out	0x3f, r0	; 63
    1d40:	cd bf       	out	0x3d, r28	; 61
    1d42:	fe 01       	movw	r30, r28
    1d44:	e7 5b       	subi	r30, 0xB7	; 183
    1d46:	ff 4f       	sbci	r31, 0xFF	; 255
    1d48:	80 e0       	ldi	r24, 0x00	; 0
    1d4a:	90 e0       	ldi	r25, 0x00	; 0
    1d4c:	ac e0       	ldi	r26, 0x0C	; 12
    1d4e:	b2 e4       	ldi	r27, 0x42	; 66
    1d50:	80 83       	st	Z, r24
    1d52:	91 83       	std	Z+1, r25	; 0x01
    1d54:	a2 83       	std	Z+2, r26	; 0x02
    1d56:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d58:	8e 01       	movw	r16, r28
    1d5a:	0b 5b       	subi	r16, 0xBB	; 187
    1d5c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d5e:	fe 01       	movw	r30, r28
    1d60:	e7 5b       	subi	r30, 0xB7	; 183
    1d62:	ff 4f       	sbci	r31, 0xFF	; 255
    1d64:	60 81       	ld	r22, Z
    1d66:	71 81       	ldd	r23, Z+1	; 0x01
    1d68:	82 81       	ldd	r24, Z+2	; 0x02
    1d6a:	93 81       	ldd	r25, Z+3	; 0x03
    1d6c:	20 e0       	ldi	r18, 0x00	; 0
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	4a ef       	ldi	r20, 0xFA	; 250
    1d72:	54 e4       	ldi	r21, 0x44	; 68
    1d74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d78:	dc 01       	movw	r26, r24
    1d7a:	cb 01       	movw	r24, r22
    1d7c:	f8 01       	movw	r30, r16
    1d7e:	80 83       	st	Z, r24
    1d80:	91 83       	std	Z+1, r25	; 0x01
    1d82:	a2 83       	std	Z+2, r26	; 0x02
    1d84:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d86:	fe 01       	movw	r30, r28
    1d88:	eb 5b       	subi	r30, 0xBB	; 187
    1d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8c:	60 81       	ld	r22, Z
    1d8e:	71 81       	ldd	r23, Z+1	; 0x01
    1d90:	82 81       	ldd	r24, Z+2	; 0x02
    1d92:	93 81       	ldd	r25, Z+3	; 0x03
    1d94:	20 e0       	ldi	r18, 0x00	; 0
    1d96:	30 e0       	ldi	r19, 0x00	; 0
    1d98:	40 e8       	ldi	r20, 0x80	; 128
    1d9a:	5f e3       	ldi	r21, 0x3F	; 63
    1d9c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1da0:	88 23       	and	r24, r24
    1da2:	44 f4       	brge	.+16     	; 0x1db4 <LCD_voidInit+0x8c>
		__ticks = 1;
    1da4:	fe 01       	movw	r30, r28
    1da6:	ed 5b       	subi	r30, 0xBD	; 189
    1da8:	ff 4f       	sbci	r31, 0xFF	; 255
    1daa:	81 e0       	ldi	r24, 0x01	; 1
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	91 83       	std	Z+1, r25	; 0x01
    1db0:	80 83       	st	Z, r24
    1db2:	64 c0       	rjmp	.+200    	; 0x1e7c <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    1db4:	fe 01       	movw	r30, r28
    1db6:	eb 5b       	subi	r30, 0xBB	; 187
    1db8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dba:	60 81       	ld	r22, Z
    1dbc:	71 81       	ldd	r23, Z+1	; 0x01
    1dbe:	82 81       	ldd	r24, Z+2	; 0x02
    1dc0:	93 81       	ldd	r25, Z+3	; 0x03
    1dc2:	20 e0       	ldi	r18, 0x00	; 0
    1dc4:	3f ef       	ldi	r19, 0xFF	; 255
    1dc6:	4f e7       	ldi	r20, 0x7F	; 127
    1dc8:	57 e4       	ldi	r21, 0x47	; 71
    1dca:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1dce:	18 16       	cp	r1, r24
    1dd0:	0c f0       	brlt	.+2      	; 0x1dd4 <LCD_voidInit+0xac>
    1dd2:	43 c0       	rjmp	.+134    	; 0x1e5a <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dd4:	fe 01       	movw	r30, r28
    1dd6:	e7 5b       	subi	r30, 0xB7	; 183
    1dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dda:	60 81       	ld	r22, Z
    1ddc:	71 81       	ldd	r23, Z+1	; 0x01
    1dde:	82 81       	ldd	r24, Z+2	; 0x02
    1de0:	93 81       	ldd	r25, Z+3	; 0x03
    1de2:	20 e0       	ldi	r18, 0x00	; 0
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	40 e2       	ldi	r20, 0x20	; 32
    1de8:	51 e4       	ldi	r21, 0x41	; 65
    1dea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dee:	dc 01       	movw	r26, r24
    1df0:	cb 01       	movw	r24, r22
    1df2:	8e 01       	movw	r16, r28
    1df4:	0d 5b       	subi	r16, 0xBD	; 189
    1df6:	1f 4f       	sbci	r17, 0xFF	; 255
    1df8:	bc 01       	movw	r22, r24
    1dfa:	cd 01       	movw	r24, r26
    1dfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e00:	dc 01       	movw	r26, r24
    1e02:	cb 01       	movw	r24, r22
    1e04:	f8 01       	movw	r30, r16
    1e06:	91 83       	std	Z+1, r25	; 0x01
    1e08:	80 83       	st	Z, r24
    1e0a:	1f c0       	rjmp	.+62     	; 0x1e4a <LCD_voidInit+0x122>
    1e0c:	fe 01       	movw	r30, r28
    1e0e:	ef 5b       	subi	r30, 0xBF	; 191
    1e10:	ff 4f       	sbci	r31, 0xFF	; 255
    1e12:	88 ec       	ldi	r24, 0xC8	; 200
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	91 83       	std	Z+1, r25	; 0x01
    1e18:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1e1a:	fe 01       	movw	r30, r28
    1e1c:	ef 5b       	subi	r30, 0xBF	; 191
    1e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e20:	80 81       	ld	r24, Z
    1e22:	91 81       	ldd	r25, Z+1	; 0x01
    1e24:	01 97       	sbiw	r24, 0x01	; 1
    1e26:	f1 f7       	brne	.-4      	; 0x1e24 <LCD_voidInit+0xfc>
    1e28:	fe 01       	movw	r30, r28
    1e2a:	ef 5b       	subi	r30, 0xBF	; 191
    1e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2e:	91 83       	std	Z+1, r25	; 0x01
    1e30:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e32:	de 01       	movw	r26, r28
    1e34:	ad 5b       	subi	r26, 0xBD	; 189
    1e36:	bf 4f       	sbci	r27, 0xFF	; 255
    1e38:	fe 01       	movw	r30, r28
    1e3a:	ed 5b       	subi	r30, 0xBD	; 189
    1e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3e:	80 81       	ld	r24, Z
    1e40:	91 81       	ldd	r25, Z+1	; 0x01
    1e42:	01 97       	sbiw	r24, 0x01	; 1
    1e44:	11 96       	adiw	r26, 0x01	; 1
    1e46:	9c 93       	st	X, r25
    1e48:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e4a:	fe 01       	movw	r30, r28
    1e4c:	ed 5b       	subi	r30, 0xBD	; 189
    1e4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e50:	80 81       	ld	r24, Z
    1e52:	91 81       	ldd	r25, Z+1	; 0x01
    1e54:	00 97       	sbiw	r24, 0x00	; 0
    1e56:	d1 f6       	brne	.-76     	; 0x1e0c <LCD_voidInit+0xe4>
    1e58:	24 c0       	rjmp	.+72     	; 0x1ea2 <LCD_voidInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e5a:	8e 01       	movw	r16, r28
    1e5c:	0d 5b       	subi	r16, 0xBD	; 189
    1e5e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e60:	fe 01       	movw	r30, r28
    1e62:	eb 5b       	subi	r30, 0xBB	; 187
    1e64:	ff 4f       	sbci	r31, 0xFF	; 255
    1e66:	60 81       	ld	r22, Z
    1e68:	71 81       	ldd	r23, Z+1	; 0x01
    1e6a:	82 81       	ldd	r24, Z+2	; 0x02
    1e6c:	93 81       	ldd	r25, Z+3	; 0x03
    1e6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e72:	dc 01       	movw	r26, r24
    1e74:	cb 01       	movw	r24, r22
    1e76:	f8 01       	movw	r30, r16
    1e78:	91 83       	std	Z+1, r25	; 0x01
    1e7a:	80 83       	st	Z, r24
    1e7c:	fe 01       	movw	r30, r28
    1e7e:	ed 5b       	subi	r30, 0xBD	; 189
    1e80:	ff 4f       	sbci	r31, 0xFF	; 255
    1e82:	80 81       	ld	r24, Z
    1e84:	91 81       	ldd	r25, Z+1	; 0x01
    1e86:	fe 01       	movw	r30, r28
    1e88:	ff 96       	adiw	r30, 0x3f	; 63
    1e8a:	91 83       	std	Z+1, r25	; 0x01
    1e8c:	80 83       	st	Z, r24
    1e8e:	fe 01       	movw	r30, r28
    1e90:	ff 96       	adiw	r30, 0x3f	; 63
    1e92:	80 81       	ld	r24, Z
    1e94:	91 81       	ldd	r25, Z+1	; 0x01
    1e96:	01 97       	sbiw	r24, 0x01	; 1
    1e98:	f1 f7       	brne	.-4      	; 0x1e96 <LCD_voidInit+0x16e>
    1e9a:	fe 01       	movw	r30, r28
    1e9c:	ff 96       	adiw	r30, 0x3f	; 63
    1e9e:	91 83       	std	Z+1, r25	; 0x01
    1ea0:	80 83       	st	Z, r24
	_delay_ms(35);
	LCD_voidWriteCmnd(0b00111000);
    1ea2:	88 e3       	ldi	r24, 0x38	; 56
    1ea4:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <LCD_voidWriteCmnd>
    1ea8:	80 e0       	ldi	r24, 0x00	; 0
    1eaa:	90 e0       	ldi	r25, 0x00	; 0
    1eac:	a0 e2       	ldi	r26, 0x20	; 32
    1eae:	b2 e4       	ldi	r27, 0x42	; 66
    1eb0:	8b af       	std	Y+59, r24	; 0x3b
    1eb2:	9c af       	std	Y+60, r25	; 0x3c
    1eb4:	ad af       	std	Y+61, r26	; 0x3d
    1eb6:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1eb8:	6b ad       	ldd	r22, Y+59	; 0x3b
    1eba:	7c ad       	ldd	r23, Y+60	; 0x3c
    1ebc:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ebe:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ec0:	2b ea       	ldi	r18, 0xAB	; 171
    1ec2:	3a ea       	ldi	r19, 0xAA	; 170
    1ec4:	4a e2       	ldi	r20, 0x2A	; 42
    1ec6:	50 e4       	ldi	r21, 0x40	; 64
    1ec8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ecc:	dc 01       	movw	r26, r24
    1ece:	cb 01       	movw	r24, r22
    1ed0:	8f ab       	std	Y+55, r24	; 0x37
    1ed2:	98 af       	std	Y+56, r25	; 0x38
    1ed4:	a9 af       	std	Y+57, r26	; 0x39
    1ed6:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1ed8:	6f a9       	ldd	r22, Y+55	; 0x37
    1eda:	78 ad       	ldd	r23, Y+56	; 0x38
    1edc:	89 ad       	ldd	r24, Y+57	; 0x39
    1ede:	9a ad       	ldd	r25, Y+58	; 0x3a
    1ee0:	20 e0       	ldi	r18, 0x00	; 0
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	40 e8       	ldi	r20, 0x80	; 128
    1ee6:	5f e3       	ldi	r21, 0x3F	; 63
    1ee8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1eec:	88 23       	and	r24, r24
    1eee:	1c f4       	brge	.+6      	; 0x1ef6 <LCD_voidInit+0x1ce>
		__ticks = 1;
    1ef0:	81 e0       	ldi	r24, 0x01	; 1
    1ef2:	8e ab       	std	Y+54, r24	; 0x36
    1ef4:	91 c0       	rjmp	.+290    	; 0x2018 <LCD_voidInit+0x2f0>
	else if (__tmp > 255)
    1ef6:	6f a9       	ldd	r22, Y+55	; 0x37
    1ef8:	78 ad       	ldd	r23, Y+56	; 0x38
    1efa:	89 ad       	ldd	r24, Y+57	; 0x39
    1efc:	9a ad       	ldd	r25, Y+58	; 0x3a
    1efe:	20 e0       	ldi	r18, 0x00	; 0
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	4f e7       	ldi	r20, 0x7F	; 127
    1f04:	53 e4       	ldi	r21, 0x43	; 67
    1f06:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f0a:	18 16       	cp	r1, r24
    1f0c:	0c f0       	brlt	.+2      	; 0x1f10 <LCD_voidInit+0x1e8>
    1f0e:	7b c0       	rjmp	.+246    	; 0x2006 <LCD_voidInit+0x2de>
	{
		_delay_ms(__us / 1000.0);
    1f10:	6b ad       	ldd	r22, Y+59	; 0x3b
    1f12:	7c ad       	ldd	r23, Y+60	; 0x3c
    1f14:	8d ad       	ldd	r24, Y+61	; 0x3d
    1f16:	9e ad       	ldd	r25, Y+62	; 0x3e
    1f18:	20 e0       	ldi	r18, 0x00	; 0
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	4a e7       	ldi	r20, 0x7A	; 122
    1f1e:	54 e4       	ldi	r21, 0x44	; 68
    1f20:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1f24:	dc 01       	movw	r26, r24
    1f26:	cb 01       	movw	r24, r22
    1f28:	8a ab       	std	Y+50, r24	; 0x32
    1f2a:	9b ab       	std	Y+51, r25	; 0x33
    1f2c:	ac ab       	std	Y+52, r26	; 0x34
    1f2e:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f30:	6a a9       	ldd	r22, Y+50	; 0x32
    1f32:	7b a9       	ldd	r23, Y+51	; 0x33
    1f34:	8c a9       	ldd	r24, Y+52	; 0x34
    1f36:	9d a9       	ldd	r25, Y+53	; 0x35
    1f38:	20 e0       	ldi	r18, 0x00	; 0
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	4a ef       	ldi	r20, 0xFA	; 250
    1f3e:	54 e4       	ldi	r21, 0x44	; 68
    1f40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f44:	dc 01       	movw	r26, r24
    1f46:	cb 01       	movw	r24, r22
    1f48:	8e a7       	std	Y+46, r24	; 0x2e
    1f4a:	9f a7       	std	Y+47, r25	; 0x2f
    1f4c:	a8 ab       	std	Y+48, r26	; 0x30
    1f4e:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1f50:	6e a5       	ldd	r22, Y+46	; 0x2e
    1f52:	7f a5       	ldd	r23, Y+47	; 0x2f
    1f54:	88 a9       	ldd	r24, Y+48	; 0x30
    1f56:	99 a9       	ldd	r25, Y+49	; 0x31
    1f58:	20 e0       	ldi	r18, 0x00	; 0
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	40 e8       	ldi	r20, 0x80	; 128
    1f5e:	5f e3       	ldi	r21, 0x3F	; 63
    1f60:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f64:	88 23       	and	r24, r24
    1f66:	2c f4       	brge	.+10     	; 0x1f72 <LCD_voidInit+0x24a>
		__ticks = 1;
    1f68:	81 e0       	ldi	r24, 0x01	; 1
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	9d a7       	std	Y+45, r25	; 0x2d
    1f6e:	8c a7       	std	Y+44, r24	; 0x2c
    1f70:	3f c0       	rjmp	.+126    	; 0x1ff0 <LCD_voidInit+0x2c8>
	else if (__tmp > 65535)
    1f72:	6e a5       	ldd	r22, Y+46	; 0x2e
    1f74:	7f a5       	ldd	r23, Y+47	; 0x2f
    1f76:	88 a9       	ldd	r24, Y+48	; 0x30
    1f78:	99 a9       	ldd	r25, Y+49	; 0x31
    1f7a:	20 e0       	ldi	r18, 0x00	; 0
    1f7c:	3f ef       	ldi	r19, 0xFF	; 255
    1f7e:	4f e7       	ldi	r20, 0x7F	; 127
    1f80:	57 e4       	ldi	r21, 0x47	; 71
    1f82:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f86:	18 16       	cp	r1, r24
    1f88:	4c f5       	brge	.+82     	; 0x1fdc <LCD_voidInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f8a:	6a a9       	ldd	r22, Y+50	; 0x32
    1f8c:	7b a9       	ldd	r23, Y+51	; 0x33
    1f8e:	8c a9       	ldd	r24, Y+52	; 0x34
    1f90:	9d a9       	ldd	r25, Y+53	; 0x35
    1f92:	20 e0       	ldi	r18, 0x00	; 0
    1f94:	30 e0       	ldi	r19, 0x00	; 0
    1f96:	40 e2       	ldi	r20, 0x20	; 32
    1f98:	51 e4       	ldi	r21, 0x41	; 65
    1f9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f9e:	dc 01       	movw	r26, r24
    1fa0:	cb 01       	movw	r24, r22
    1fa2:	bc 01       	movw	r22, r24
    1fa4:	cd 01       	movw	r24, r26
    1fa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1faa:	dc 01       	movw	r26, r24
    1fac:	cb 01       	movw	r24, r22
    1fae:	9d a7       	std	Y+45, r25	; 0x2d
    1fb0:	8c a7       	std	Y+44, r24	; 0x2c
    1fb2:	0f c0       	rjmp	.+30     	; 0x1fd2 <LCD_voidInit+0x2aa>
    1fb4:	88 ec       	ldi	r24, 0xC8	; 200
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	9b a7       	std	Y+43, r25	; 0x2b
    1fba:	8a a7       	std	Y+42, r24	; 0x2a
    1fbc:	8a a5       	ldd	r24, Y+42	; 0x2a
    1fbe:	9b a5       	ldd	r25, Y+43	; 0x2b
    1fc0:	01 97       	sbiw	r24, 0x01	; 1
    1fc2:	f1 f7       	brne	.-4      	; 0x1fc0 <LCD_voidInit+0x298>
    1fc4:	9b a7       	std	Y+43, r25	; 0x2b
    1fc6:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fc8:	8c a5       	ldd	r24, Y+44	; 0x2c
    1fca:	9d a5       	ldd	r25, Y+45	; 0x2d
    1fcc:	01 97       	sbiw	r24, 0x01	; 1
    1fce:	9d a7       	std	Y+45, r25	; 0x2d
    1fd0:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fd2:	8c a5       	ldd	r24, Y+44	; 0x2c
    1fd4:	9d a5       	ldd	r25, Y+45	; 0x2d
    1fd6:	00 97       	sbiw	r24, 0x00	; 0
    1fd8:	69 f7       	brne	.-38     	; 0x1fb4 <LCD_voidInit+0x28c>
    1fda:	24 c0       	rjmp	.+72     	; 0x2024 <LCD_voidInit+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fdc:	6e a5       	ldd	r22, Y+46	; 0x2e
    1fde:	7f a5       	ldd	r23, Y+47	; 0x2f
    1fe0:	88 a9       	ldd	r24, Y+48	; 0x30
    1fe2:	99 a9       	ldd	r25, Y+49	; 0x31
    1fe4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe8:	dc 01       	movw	r26, r24
    1fea:	cb 01       	movw	r24, r22
    1fec:	9d a7       	std	Y+45, r25	; 0x2d
    1fee:	8c a7       	std	Y+44, r24	; 0x2c
    1ff0:	8c a5       	ldd	r24, Y+44	; 0x2c
    1ff2:	9d a5       	ldd	r25, Y+45	; 0x2d
    1ff4:	99 a7       	std	Y+41, r25	; 0x29
    1ff6:	88 a7       	std	Y+40, r24	; 0x28
    1ff8:	88 a5       	ldd	r24, Y+40	; 0x28
    1ffa:	99 a5       	ldd	r25, Y+41	; 0x29
    1ffc:	01 97       	sbiw	r24, 0x01	; 1
    1ffe:	f1 f7       	brne	.-4      	; 0x1ffc <LCD_voidInit+0x2d4>
    2000:	99 a7       	std	Y+41, r25	; 0x29
    2002:	88 a7       	std	Y+40, r24	; 0x28
    2004:	0f c0       	rjmp	.+30     	; 0x2024 <LCD_voidInit+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2006:	6f a9       	ldd	r22, Y+55	; 0x37
    2008:	78 ad       	ldd	r23, Y+56	; 0x38
    200a:	89 ad       	ldd	r24, Y+57	; 0x39
    200c:	9a ad       	ldd	r25, Y+58	; 0x3a
    200e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2012:	dc 01       	movw	r26, r24
    2014:	cb 01       	movw	r24, r22
    2016:	8e ab       	std	Y+54, r24	; 0x36
    2018:	8e a9       	ldd	r24, Y+54	; 0x36
    201a:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    201c:	8f a1       	ldd	r24, Y+39	; 0x27
    201e:	8a 95       	dec	r24
    2020:	f1 f7       	brne	.-4      	; 0x201e <LCD_voidInit+0x2f6>
    2022:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(40);
	LCD_voidWriteCmnd(0b00001111);
    2024:	8f e0       	ldi	r24, 0x0F	; 15
    2026:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <LCD_voidWriteCmnd>
    202a:	80 e0       	ldi	r24, 0x00	; 0
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	a0 e2       	ldi	r26, 0x20	; 32
    2030:	b2 e4       	ldi	r27, 0x42	; 66
    2032:	8b a3       	std	Y+35, r24	; 0x23
    2034:	9c a3       	std	Y+36, r25	; 0x24
    2036:	ad a3       	std	Y+37, r26	; 0x25
    2038:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    203a:	6b a1       	ldd	r22, Y+35	; 0x23
    203c:	7c a1       	ldd	r23, Y+36	; 0x24
    203e:	8d a1       	ldd	r24, Y+37	; 0x25
    2040:	9e a1       	ldd	r25, Y+38	; 0x26
    2042:	2b ea       	ldi	r18, 0xAB	; 171
    2044:	3a ea       	ldi	r19, 0xAA	; 170
    2046:	4a e2       	ldi	r20, 0x2A	; 42
    2048:	50 e4       	ldi	r21, 0x40	; 64
    204a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    204e:	dc 01       	movw	r26, r24
    2050:	cb 01       	movw	r24, r22
    2052:	8f 8f       	std	Y+31, r24	; 0x1f
    2054:	98 a3       	std	Y+32, r25	; 0x20
    2056:	a9 a3       	std	Y+33, r26	; 0x21
    2058:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    205a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    205c:	78 a1       	ldd	r23, Y+32	; 0x20
    205e:	89 a1       	ldd	r24, Y+33	; 0x21
    2060:	9a a1       	ldd	r25, Y+34	; 0x22
    2062:	20 e0       	ldi	r18, 0x00	; 0
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	40 e8       	ldi	r20, 0x80	; 128
    2068:	5f e3       	ldi	r21, 0x3F	; 63
    206a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    206e:	88 23       	and	r24, r24
    2070:	1c f4       	brge	.+6      	; 0x2078 <LCD_voidInit+0x350>
		__ticks = 1;
    2072:	81 e0       	ldi	r24, 0x01	; 1
    2074:	8e 8f       	std	Y+30, r24	; 0x1e
    2076:	91 c0       	rjmp	.+290    	; 0x219a <LCD_voidInit+0x472>
	else if (__tmp > 255)
    2078:	6f 8d       	ldd	r22, Y+31	; 0x1f
    207a:	78 a1       	ldd	r23, Y+32	; 0x20
    207c:	89 a1       	ldd	r24, Y+33	; 0x21
    207e:	9a a1       	ldd	r25, Y+34	; 0x22
    2080:	20 e0       	ldi	r18, 0x00	; 0
    2082:	30 e0       	ldi	r19, 0x00	; 0
    2084:	4f e7       	ldi	r20, 0x7F	; 127
    2086:	53 e4       	ldi	r21, 0x43	; 67
    2088:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    208c:	18 16       	cp	r1, r24
    208e:	0c f0       	brlt	.+2      	; 0x2092 <LCD_voidInit+0x36a>
    2090:	7b c0       	rjmp	.+246    	; 0x2188 <LCD_voidInit+0x460>
	{
		_delay_ms(__us / 1000.0);
    2092:	6b a1       	ldd	r22, Y+35	; 0x23
    2094:	7c a1       	ldd	r23, Y+36	; 0x24
    2096:	8d a1       	ldd	r24, Y+37	; 0x25
    2098:	9e a1       	ldd	r25, Y+38	; 0x26
    209a:	20 e0       	ldi	r18, 0x00	; 0
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	4a e7       	ldi	r20, 0x7A	; 122
    20a0:	54 e4       	ldi	r21, 0x44	; 68
    20a2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    20a6:	dc 01       	movw	r26, r24
    20a8:	cb 01       	movw	r24, r22
    20aa:	8a 8f       	std	Y+26, r24	; 0x1a
    20ac:	9b 8f       	std	Y+27, r25	; 0x1b
    20ae:	ac 8f       	std	Y+28, r26	; 0x1c
    20b0:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20b2:	6a 8d       	ldd	r22, Y+26	; 0x1a
    20b4:	7b 8d       	ldd	r23, Y+27	; 0x1b
    20b6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    20b8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    20ba:	20 e0       	ldi	r18, 0x00	; 0
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	4a ef       	ldi	r20, 0xFA	; 250
    20c0:	54 e4       	ldi	r21, 0x44	; 68
    20c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c6:	dc 01       	movw	r26, r24
    20c8:	cb 01       	movw	r24, r22
    20ca:	8e 8b       	std	Y+22, r24	; 0x16
    20cc:	9f 8b       	std	Y+23, r25	; 0x17
    20ce:	a8 8f       	std	Y+24, r26	; 0x18
    20d0:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    20d2:	6e 89       	ldd	r22, Y+22	; 0x16
    20d4:	7f 89       	ldd	r23, Y+23	; 0x17
    20d6:	88 8d       	ldd	r24, Y+24	; 0x18
    20d8:	99 8d       	ldd	r25, Y+25	; 0x19
    20da:	20 e0       	ldi	r18, 0x00	; 0
    20dc:	30 e0       	ldi	r19, 0x00	; 0
    20de:	40 e8       	ldi	r20, 0x80	; 128
    20e0:	5f e3       	ldi	r21, 0x3F	; 63
    20e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20e6:	88 23       	and	r24, r24
    20e8:	2c f4       	brge	.+10     	; 0x20f4 <LCD_voidInit+0x3cc>
		__ticks = 1;
    20ea:	81 e0       	ldi	r24, 0x01	; 1
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	9d 8b       	std	Y+21, r25	; 0x15
    20f0:	8c 8b       	std	Y+20, r24	; 0x14
    20f2:	3f c0       	rjmp	.+126    	; 0x2172 <LCD_voidInit+0x44a>
	else if (__tmp > 65535)
    20f4:	6e 89       	ldd	r22, Y+22	; 0x16
    20f6:	7f 89       	ldd	r23, Y+23	; 0x17
    20f8:	88 8d       	ldd	r24, Y+24	; 0x18
    20fa:	99 8d       	ldd	r25, Y+25	; 0x19
    20fc:	20 e0       	ldi	r18, 0x00	; 0
    20fe:	3f ef       	ldi	r19, 0xFF	; 255
    2100:	4f e7       	ldi	r20, 0x7F	; 127
    2102:	57 e4       	ldi	r21, 0x47	; 71
    2104:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2108:	18 16       	cp	r1, r24
    210a:	4c f5       	brge	.+82     	; 0x215e <LCD_voidInit+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    210c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    210e:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2110:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2112:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2114:	20 e0       	ldi	r18, 0x00	; 0
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	40 e2       	ldi	r20, 0x20	; 32
    211a:	51 e4       	ldi	r21, 0x41	; 65
    211c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2120:	dc 01       	movw	r26, r24
    2122:	cb 01       	movw	r24, r22
    2124:	bc 01       	movw	r22, r24
    2126:	cd 01       	movw	r24, r26
    2128:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    212c:	dc 01       	movw	r26, r24
    212e:	cb 01       	movw	r24, r22
    2130:	9d 8b       	std	Y+21, r25	; 0x15
    2132:	8c 8b       	std	Y+20, r24	; 0x14
    2134:	0f c0       	rjmp	.+30     	; 0x2154 <LCD_voidInit+0x42c>
    2136:	88 ec       	ldi	r24, 0xC8	; 200
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	9b 8b       	std	Y+19, r25	; 0x13
    213c:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    213e:	8a 89       	ldd	r24, Y+18	; 0x12
    2140:	9b 89       	ldd	r25, Y+19	; 0x13
    2142:	01 97       	sbiw	r24, 0x01	; 1
    2144:	f1 f7       	brne	.-4      	; 0x2142 <LCD_voidInit+0x41a>
    2146:	9b 8b       	std	Y+19, r25	; 0x13
    2148:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    214a:	8c 89       	ldd	r24, Y+20	; 0x14
    214c:	9d 89       	ldd	r25, Y+21	; 0x15
    214e:	01 97       	sbiw	r24, 0x01	; 1
    2150:	9d 8b       	std	Y+21, r25	; 0x15
    2152:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2154:	8c 89       	ldd	r24, Y+20	; 0x14
    2156:	9d 89       	ldd	r25, Y+21	; 0x15
    2158:	00 97       	sbiw	r24, 0x00	; 0
    215a:	69 f7       	brne	.-38     	; 0x2136 <LCD_voidInit+0x40e>
    215c:	24 c0       	rjmp	.+72     	; 0x21a6 <LCD_voidInit+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    215e:	6e 89       	ldd	r22, Y+22	; 0x16
    2160:	7f 89       	ldd	r23, Y+23	; 0x17
    2162:	88 8d       	ldd	r24, Y+24	; 0x18
    2164:	99 8d       	ldd	r25, Y+25	; 0x19
    2166:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    216a:	dc 01       	movw	r26, r24
    216c:	cb 01       	movw	r24, r22
    216e:	9d 8b       	std	Y+21, r25	; 0x15
    2170:	8c 8b       	std	Y+20, r24	; 0x14
    2172:	8c 89       	ldd	r24, Y+20	; 0x14
    2174:	9d 89       	ldd	r25, Y+21	; 0x15
    2176:	99 8b       	std	Y+17, r25	; 0x11
    2178:	88 8b       	std	Y+16, r24	; 0x10
    217a:	88 89       	ldd	r24, Y+16	; 0x10
    217c:	99 89       	ldd	r25, Y+17	; 0x11
    217e:	01 97       	sbiw	r24, 0x01	; 1
    2180:	f1 f7       	brne	.-4      	; 0x217e <LCD_voidInit+0x456>
    2182:	99 8b       	std	Y+17, r25	; 0x11
    2184:	88 8b       	std	Y+16, r24	; 0x10
    2186:	0f c0       	rjmp	.+30     	; 0x21a6 <LCD_voidInit+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2188:	6f 8d       	ldd	r22, Y+31	; 0x1f
    218a:	78 a1       	ldd	r23, Y+32	; 0x20
    218c:	89 a1       	ldd	r24, Y+33	; 0x21
    218e:	9a a1       	ldd	r25, Y+34	; 0x22
    2190:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2194:	dc 01       	movw	r26, r24
    2196:	cb 01       	movw	r24, r22
    2198:	8e 8f       	std	Y+30, r24	; 0x1e
    219a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    219c:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    219e:	8f 85       	ldd	r24, Y+15	; 0x0f
    21a0:	8a 95       	dec	r24
    21a2:	f1 f7       	brne	.-4      	; 0x21a0 <LCD_voidInit+0x478>
    21a4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(40);
	LCD_voidWriteCmnd(0x01);
    21a6:	81 e0       	ldi	r24, 0x01	; 1
    21a8:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <LCD_voidWriteCmnd>
    21ac:	80 e0       	ldi	r24, 0x00	; 0
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	a0 e0       	ldi	r26, 0x00	; 0
    21b2:	b0 e4       	ldi	r27, 0x40	; 64
    21b4:	8b 87       	std	Y+11, r24	; 0x0b
    21b6:	9c 87       	std	Y+12, r25	; 0x0c
    21b8:	ad 87       	std	Y+13, r26	; 0x0d
    21ba:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    21be:	7c 85       	ldd	r23, Y+12	; 0x0c
    21c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    21c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    21c4:	20 e0       	ldi	r18, 0x00	; 0
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	4a ef       	ldi	r20, 0xFA	; 250
    21ca:	54 e4       	ldi	r21, 0x44	; 68
    21cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21d0:	dc 01       	movw	r26, r24
    21d2:	cb 01       	movw	r24, r22
    21d4:	8f 83       	std	Y+7, r24	; 0x07
    21d6:	98 87       	std	Y+8, r25	; 0x08
    21d8:	a9 87       	std	Y+9, r26	; 0x09
    21da:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21dc:	6f 81       	ldd	r22, Y+7	; 0x07
    21de:	78 85       	ldd	r23, Y+8	; 0x08
    21e0:	89 85       	ldd	r24, Y+9	; 0x09
    21e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    21e4:	20 e0       	ldi	r18, 0x00	; 0
    21e6:	30 e0       	ldi	r19, 0x00	; 0
    21e8:	40 e8       	ldi	r20, 0x80	; 128
    21ea:	5f e3       	ldi	r21, 0x3F	; 63
    21ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21f0:	88 23       	and	r24, r24
    21f2:	2c f4       	brge	.+10     	; 0x21fe <LCD_voidInit+0x4d6>
		__ticks = 1;
    21f4:	81 e0       	ldi	r24, 0x01	; 1
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	9e 83       	std	Y+6, r25	; 0x06
    21fa:	8d 83       	std	Y+5, r24	; 0x05
    21fc:	3f c0       	rjmp	.+126    	; 0x227c <LCD_voidInit+0x554>
	else if (__tmp > 65535)
    21fe:	6f 81       	ldd	r22, Y+7	; 0x07
    2200:	78 85       	ldd	r23, Y+8	; 0x08
    2202:	89 85       	ldd	r24, Y+9	; 0x09
    2204:	9a 85       	ldd	r25, Y+10	; 0x0a
    2206:	20 e0       	ldi	r18, 0x00	; 0
    2208:	3f ef       	ldi	r19, 0xFF	; 255
    220a:	4f e7       	ldi	r20, 0x7F	; 127
    220c:	57 e4       	ldi	r21, 0x47	; 71
    220e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2212:	18 16       	cp	r1, r24
    2214:	4c f5       	brge	.+82     	; 0x2268 <LCD_voidInit+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2216:	6b 85       	ldd	r22, Y+11	; 0x0b
    2218:	7c 85       	ldd	r23, Y+12	; 0x0c
    221a:	8d 85       	ldd	r24, Y+13	; 0x0d
    221c:	9e 85       	ldd	r25, Y+14	; 0x0e
    221e:	20 e0       	ldi	r18, 0x00	; 0
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	40 e2       	ldi	r20, 0x20	; 32
    2224:	51 e4       	ldi	r21, 0x41	; 65
    2226:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    222a:	dc 01       	movw	r26, r24
    222c:	cb 01       	movw	r24, r22
    222e:	bc 01       	movw	r22, r24
    2230:	cd 01       	movw	r24, r26
    2232:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2236:	dc 01       	movw	r26, r24
    2238:	cb 01       	movw	r24, r22
    223a:	9e 83       	std	Y+6, r25	; 0x06
    223c:	8d 83       	std	Y+5, r24	; 0x05
    223e:	0f c0       	rjmp	.+30     	; 0x225e <LCD_voidInit+0x536>
    2240:	88 ec       	ldi	r24, 0xC8	; 200
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	9c 83       	std	Y+4, r25	; 0x04
    2246:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2248:	8b 81       	ldd	r24, Y+3	; 0x03
    224a:	9c 81       	ldd	r25, Y+4	; 0x04
    224c:	01 97       	sbiw	r24, 0x01	; 1
    224e:	f1 f7       	brne	.-4      	; 0x224c <LCD_voidInit+0x524>
    2250:	9c 83       	std	Y+4, r25	; 0x04
    2252:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2254:	8d 81       	ldd	r24, Y+5	; 0x05
    2256:	9e 81       	ldd	r25, Y+6	; 0x06
    2258:	01 97       	sbiw	r24, 0x01	; 1
    225a:	9e 83       	std	Y+6, r25	; 0x06
    225c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    225e:	8d 81       	ldd	r24, Y+5	; 0x05
    2260:	9e 81       	ldd	r25, Y+6	; 0x06
    2262:	00 97       	sbiw	r24, 0x00	; 0
    2264:	69 f7       	brne	.-38     	; 0x2240 <LCD_voidInit+0x518>
    2266:	14 c0       	rjmp	.+40     	; 0x2290 <LCD_voidInit+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2268:	6f 81       	ldd	r22, Y+7	; 0x07
    226a:	78 85       	ldd	r23, Y+8	; 0x08
    226c:	89 85       	ldd	r24, Y+9	; 0x09
    226e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2270:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2274:	dc 01       	movw	r26, r24
    2276:	cb 01       	movw	r24, r22
    2278:	9e 83       	std	Y+6, r25	; 0x06
    227a:	8d 83       	std	Y+5, r24	; 0x05
    227c:	8d 81       	ldd	r24, Y+5	; 0x05
    227e:	9e 81       	ldd	r25, Y+6	; 0x06
    2280:	9a 83       	std	Y+2, r25	; 0x02
    2282:	89 83       	std	Y+1, r24	; 0x01
    2284:	89 81       	ldd	r24, Y+1	; 0x01
    2286:	9a 81       	ldd	r25, Y+2	; 0x02
    2288:	01 97       	sbiw	r24, 0x01	; 1
    228a:	f1 f7       	brne	.-4      	; 0x2288 <LCD_voidInit+0x560>
    228c:	9a 83       	std	Y+2, r25	; 0x02
    228e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_voidWriteCmnd(0b00000110);
    2290:	86 e0       	ldi	r24, 0x06	; 6
    2292:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <LCD_voidWriteCmnd>
}
    2296:	c4 5b       	subi	r28, 0xB4	; 180
    2298:	df 4f       	sbci	r29, 0xFF	; 255
    229a:	0f b6       	in	r0, 0x3f	; 63
    229c:	f8 94       	cli
    229e:	de bf       	out	0x3e, r29	; 62
    22a0:	0f be       	out	0x3f, r0	; 63
    22a2:	cd bf       	out	0x3d, r28	; 61
    22a4:	cf 91       	pop	r28
    22a6:	df 91       	pop	r29
    22a8:	1f 91       	pop	r17
    22aa:	0f 91       	pop	r16
    22ac:	08 95       	ret

000022ae <LCD_voidWriteString>:

void LCD_voidWriteString(u8 *Copy_u8String)
{
    22ae:	df 93       	push	r29
    22b0:	cf 93       	push	r28
    22b2:	00 d0       	rcall	.+0      	; 0x22b4 <LCD_voidWriteString+0x6>
    22b4:	00 d0       	rcall	.+0      	; 0x22b6 <LCD_voidWriteString+0x8>
    22b6:	00 d0       	rcall	.+0      	; 0x22b8 <LCD_voidWriteString+0xa>
    22b8:	cd b7       	in	r28, 0x3d	; 61
    22ba:	de b7       	in	r29, 0x3e	; 62
    22bc:	9e 83       	std	Y+6, r25	; 0x06
    22be:	8d 83       	std	Y+5, r24	; 0x05
	u16 len = strlen(Copy_u8String);
    22c0:	8d 81       	ldd	r24, Y+5	; 0x05
    22c2:	9e 81       	ldd	r25, Y+6	; 0x06
    22c4:	0e 94 1e 12 	call	0x243c	; 0x243c <strlen>
    22c8:	9c 83       	std	Y+4, r25	; 0x04
    22ca:	8b 83       	std	Y+3, r24	; 0x03
	/* Send Data Byte to LCD 	*/
	for (u16 i = 0; i < len ; i++)
    22cc:	1a 82       	std	Y+2, r1	; 0x02
    22ce:	19 82       	std	Y+1, r1	; 0x01
    22d0:	0f c0       	rjmp	.+30     	; 0x22f0 <LCD_voidWriteString+0x42>
	{
		LCD_voidWriteChar(Copy_u8String[i]);
    22d2:	2d 81       	ldd	r18, Y+5	; 0x05
    22d4:	3e 81       	ldd	r19, Y+6	; 0x06
    22d6:	89 81       	ldd	r24, Y+1	; 0x01
    22d8:	9a 81       	ldd	r25, Y+2	; 0x02
    22da:	f9 01       	movw	r30, r18
    22dc:	e8 0f       	add	r30, r24
    22de:	f9 1f       	adc	r31, r25
    22e0:	80 81       	ld	r24, Z
    22e2:	0e 94 c0 0c 	call	0x1980	; 0x1980 <LCD_voidWriteChar>

void LCD_voidWriteString(u8 *Copy_u8String)
{
	u16 len = strlen(Copy_u8String);
	/* Send Data Byte to LCD 	*/
	for (u16 i = 0; i < len ; i++)
    22e6:	89 81       	ldd	r24, Y+1	; 0x01
    22e8:	9a 81       	ldd	r25, Y+2	; 0x02
    22ea:	01 96       	adiw	r24, 0x01	; 1
    22ec:	9a 83       	std	Y+2, r25	; 0x02
    22ee:	89 83       	std	Y+1, r24	; 0x01
    22f0:	29 81       	ldd	r18, Y+1	; 0x01
    22f2:	3a 81       	ldd	r19, Y+2	; 0x02
    22f4:	8b 81       	ldd	r24, Y+3	; 0x03
    22f6:	9c 81       	ldd	r25, Y+4	; 0x04
    22f8:	28 17       	cp	r18, r24
    22fa:	39 07       	cpc	r19, r25
    22fc:	50 f3       	brcs	.-44     	; 0x22d2 <LCD_voidWriteString+0x24>
	{
		LCD_voidWriteChar(Copy_u8String[i]);
	}
}
    22fe:	26 96       	adiw	r28, 0x06	; 6
    2300:	0f b6       	in	r0, 0x3f	; 63
    2302:	f8 94       	cli
    2304:	de bf       	out	0x3e, r29	; 62
    2306:	0f be       	out	0x3f, r0	; 63
    2308:	cd bf       	out	0x3d, r28	; 61
    230a:	cf 91       	pop	r28
    230c:	df 91       	pop	r29
    230e:	08 95       	ret

00002310 <LCD_voidWriteNum>:

void LCD_voidWriteNum(u8 *Copy_u8Num)
{
    2310:	df 93       	push	r29
    2312:	cf 93       	push	r28
    2314:	00 d0       	rcall	.+0      	; 0x2316 <LCD_voidWriteNum+0x6>
    2316:	00 d0       	rcall	.+0      	; 0x2318 <LCD_voidWriteNum+0x8>
    2318:	0f 92       	push	r0
    231a:	cd b7       	in	r28, 0x3d	; 61
    231c:	de b7       	in	r29, 0x3e	; 62
    231e:	9d 83       	std	Y+5, r25	; 0x05
    2320:	8c 83       	std	Y+4, r24	; 0x04
	u8 count = 0;
    2322:	1b 82       	std	Y+3, r1	; 0x03
	do
	{
		count++;
    2324:	8b 81       	ldd	r24, Y+3	; 0x03
    2326:	8f 5f       	subi	r24, 0xFF	; 255
    2328:	8b 83       	std	Y+3, r24	; 0x03
		*Copy_u8Num /= 10;
    232a:	ec 81       	ldd	r30, Y+4	; 0x04
    232c:	fd 81       	ldd	r31, Y+5	; 0x05
    232e:	80 81       	ld	r24, Z
    2330:	9a e0       	ldi	r25, 0x0A	; 10
    2332:	69 2f       	mov	r22, r25
    2334:	0e 94 db 11 	call	0x23b6	; 0x23b6 <__udivmodqi4>
    2338:	ec 81       	ldd	r30, Y+4	; 0x04
    233a:	fd 81       	ldd	r31, Y+5	; 0x05
    233c:	80 83       	st	Z, r24
	} while(*Copy_u8Num != 0);
    233e:	ec 81       	ldd	r30, Y+4	; 0x04
    2340:	fd 81       	ldd	r31, Y+5	; 0x05
    2342:	80 81       	ld	r24, Z
    2344:	88 23       	and	r24, r24
    2346:	71 f7       	brne	.-36     	; 0x2324 <LCD_voidWriteNum+0x14>

	for (u16 i = 0; i < count ; i++)
    2348:	1a 82       	std	Y+2, r1	; 0x02
    234a:	19 82       	std	Y+1, r1	; 0x01
    234c:	10 c0       	rjmp	.+32     	; 0x236e <LCD_voidWriteNum+0x5e>
	{
		LCD_voidWriteChar('0'+ Copy_u8Num[i]);
    234e:	2c 81       	ldd	r18, Y+4	; 0x04
    2350:	3d 81       	ldd	r19, Y+5	; 0x05
    2352:	89 81       	ldd	r24, Y+1	; 0x01
    2354:	9a 81       	ldd	r25, Y+2	; 0x02
    2356:	f9 01       	movw	r30, r18
    2358:	e8 0f       	add	r30, r24
    235a:	f9 1f       	adc	r31, r25
    235c:	80 81       	ld	r24, Z
    235e:	80 5d       	subi	r24, 0xD0	; 208
    2360:	0e 94 c0 0c 	call	0x1980	; 0x1980 <LCD_voidWriteChar>
	{
		count++;
		*Copy_u8Num /= 10;
	} while(*Copy_u8Num != 0);

	for (u16 i = 0; i < count ; i++)
    2364:	89 81       	ldd	r24, Y+1	; 0x01
    2366:	9a 81       	ldd	r25, Y+2	; 0x02
    2368:	01 96       	adiw	r24, 0x01	; 1
    236a:	9a 83       	std	Y+2, r25	; 0x02
    236c:	89 83       	std	Y+1, r24	; 0x01
    236e:	8b 81       	ldd	r24, Y+3	; 0x03
    2370:	28 2f       	mov	r18, r24
    2372:	30 e0       	ldi	r19, 0x00	; 0
    2374:	89 81       	ldd	r24, Y+1	; 0x01
    2376:	9a 81       	ldd	r25, Y+2	; 0x02
    2378:	82 17       	cp	r24, r18
    237a:	93 07       	cpc	r25, r19
    237c:	40 f3       	brcs	.-48     	; 0x234e <LCD_voidWriteNum+0x3e>
	{
		LCD_voidWriteChar('0'+ Copy_u8Num[i]);
	}

}
    237e:	0f 90       	pop	r0
    2380:	0f 90       	pop	r0
    2382:	0f 90       	pop	r0
    2384:	0f 90       	pop	r0
    2386:	0f 90       	pop	r0
    2388:	cf 91       	pop	r28
    238a:	df 91       	pop	r29
    238c:	08 95       	ret

0000238e <main>:

#include "LCD_interface.h"
#include "KPD_interface.h"

int main(void)
{
    238e:	df 93       	push	r29
    2390:	cf 93       	push	r28
    2392:	0f 92       	push	r0
    2394:	cd b7       	in	r28, 0x3d	; 61
    2396:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8Key;
	DIO_u8Init();
    2398:	0e 94 81 0b 	call	0x1702	; 0x1702 <DIO_u8Init>
	LCD_voidInit();
    239c:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <LCD_voidInit>


	while(1)
	{

		KPD_u8GetKeyValue(&Local_u8Key);
    23a0:	ce 01       	movw	r24, r28
    23a2:	01 96       	adiw	r24, 0x01	; 1
    23a4:	0e 94 a4 0b 	call	0x1748	; 0x1748 <KPD_u8GetKeyValue>
		if(Local_u8Key != KPD_u8_KEY_NOT_PRESSED)
    23a8:	89 81       	ldd	r24, Y+1	; 0x01
    23aa:	8f 3f       	cpi	r24, 0xFF	; 255
    23ac:	c9 f3       	breq	.-14     	; 0x23a0 <main+0x12>
		{
			LCD_voidWriteChar(Local_u8Key);
    23ae:	89 81       	ldd	r24, Y+1	; 0x01
    23b0:	0e 94 c0 0c 	call	0x1980	; 0x1980 <LCD_voidWriteChar>
    23b4:	f5 cf       	rjmp	.-22     	; 0x23a0 <main+0x12>

000023b6 <__udivmodqi4>:
    23b6:	99 1b       	sub	r25, r25
    23b8:	79 e0       	ldi	r23, 0x09	; 9
    23ba:	04 c0       	rjmp	.+8      	; 0x23c4 <__udivmodqi4_ep>

000023bc <__udivmodqi4_loop>:
    23bc:	99 1f       	adc	r25, r25
    23be:	96 17       	cp	r25, r22
    23c0:	08 f0       	brcs	.+2      	; 0x23c4 <__udivmodqi4_ep>
    23c2:	96 1b       	sub	r25, r22

000023c4 <__udivmodqi4_ep>:
    23c4:	88 1f       	adc	r24, r24
    23c6:	7a 95       	dec	r23
    23c8:	c9 f7       	brne	.-14     	; 0x23bc <__udivmodqi4_loop>
    23ca:	80 95       	com	r24
    23cc:	08 95       	ret

000023ce <__prologue_saves__>:
    23ce:	2f 92       	push	r2
    23d0:	3f 92       	push	r3
    23d2:	4f 92       	push	r4
    23d4:	5f 92       	push	r5
    23d6:	6f 92       	push	r6
    23d8:	7f 92       	push	r7
    23da:	8f 92       	push	r8
    23dc:	9f 92       	push	r9
    23de:	af 92       	push	r10
    23e0:	bf 92       	push	r11
    23e2:	cf 92       	push	r12
    23e4:	df 92       	push	r13
    23e6:	ef 92       	push	r14
    23e8:	ff 92       	push	r15
    23ea:	0f 93       	push	r16
    23ec:	1f 93       	push	r17
    23ee:	cf 93       	push	r28
    23f0:	df 93       	push	r29
    23f2:	cd b7       	in	r28, 0x3d	; 61
    23f4:	de b7       	in	r29, 0x3e	; 62
    23f6:	ca 1b       	sub	r28, r26
    23f8:	db 0b       	sbc	r29, r27
    23fa:	0f b6       	in	r0, 0x3f	; 63
    23fc:	f8 94       	cli
    23fe:	de bf       	out	0x3e, r29	; 62
    2400:	0f be       	out	0x3f, r0	; 63
    2402:	cd bf       	out	0x3d, r28	; 61
    2404:	09 94       	ijmp

00002406 <__epilogue_restores__>:
    2406:	2a 88       	ldd	r2, Y+18	; 0x12
    2408:	39 88       	ldd	r3, Y+17	; 0x11
    240a:	48 88       	ldd	r4, Y+16	; 0x10
    240c:	5f 84       	ldd	r5, Y+15	; 0x0f
    240e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2410:	7d 84       	ldd	r7, Y+13	; 0x0d
    2412:	8c 84       	ldd	r8, Y+12	; 0x0c
    2414:	9b 84       	ldd	r9, Y+11	; 0x0b
    2416:	aa 84       	ldd	r10, Y+10	; 0x0a
    2418:	b9 84       	ldd	r11, Y+9	; 0x09
    241a:	c8 84       	ldd	r12, Y+8	; 0x08
    241c:	df 80       	ldd	r13, Y+7	; 0x07
    241e:	ee 80       	ldd	r14, Y+6	; 0x06
    2420:	fd 80       	ldd	r15, Y+5	; 0x05
    2422:	0c 81       	ldd	r16, Y+4	; 0x04
    2424:	1b 81       	ldd	r17, Y+3	; 0x03
    2426:	aa 81       	ldd	r26, Y+2	; 0x02
    2428:	b9 81       	ldd	r27, Y+1	; 0x01
    242a:	ce 0f       	add	r28, r30
    242c:	d1 1d       	adc	r29, r1
    242e:	0f b6       	in	r0, 0x3f	; 63
    2430:	f8 94       	cli
    2432:	de bf       	out	0x3e, r29	; 62
    2434:	0f be       	out	0x3f, r0	; 63
    2436:	cd bf       	out	0x3d, r28	; 61
    2438:	ed 01       	movw	r28, r26
    243a:	08 95       	ret

0000243c <strlen>:
    243c:	fc 01       	movw	r30, r24
    243e:	01 90       	ld	r0, Z+
    2440:	00 20       	and	r0, r0
    2442:	e9 f7       	brne	.-6      	; 0x243e <strlen+0x2>
    2444:	80 95       	com	r24
    2446:	90 95       	com	r25
    2448:	8e 0f       	add	r24, r30
    244a:	9f 1f       	adc	r25, r31
    244c:	08 95       	ret

0000244e <_exit>:
    244e:	f8 94       	cli

00002450 <__stop_program>:
    2450:	ff cf       	rjmp	.-2      	; 0x2450 <__stop_program>
